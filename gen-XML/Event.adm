class CodeGenerator
{
	function Event()
	{
		if (LineLength < 2)
		{
			Error("event: 引数がありません。");
			return;
		}
		
		var structName = GetColumn(1);
		var procKey    = GetColumn(2);
		var procName   = GetColumn(3);
		
		var names = new StringList;
		var types = new StringList;
		var mesgs = new ArrayList;
		var funcs = new VarList;
		
		var prevm : StringList = null;
		int max_type = 0, max_name = 0;
		while (ReadLine())
		{
			var name = GetColumn(0);
			var type = GetColumn(1);
			var mesg = GetColumn(2);
			var func = GetColumn(3);
			if (string.IsNullOrEmpty(name) || string.IsNullOrEmpty(type))
			{
				if (string.IsNullOrEmpty(mesg))
					break;
				else
				{
					if (prevm != null) prevm.Add(mesg);
					continue;
				}
			}
			names.Add(name);
			types.Add(type);
			prevm = new StringList;
			mesgs.Add(prevm);
			if (!string.IsNullOrEmpty(mesg)) prevm.Add(mesg);
			max_name = Math.Max(max_name, name.Length);
			max_type = Math.Max(max_type, type.Length);
			if (func == null || func != "0")
				funcs.Add(1);
			else
				funcs.Add(0);
		}
		
		WriteLine("%s", structName);
		WriteLine("{");
		for (int i = 0; i < types.Count; i++)
			WriteLine("\tvar %s = new Event;", names.Get(i).PadRight(max_name));
		WriteLine("");
		for (int i = 0; i < types.Count; i++)
		{
			if (funcs.Get(i) == 0) continue;
			var name = names.Get(i).PadRight(max_name);
			var type = types.Get(i).PadRight(max_type);
			WriteLine("\tvirtual On%s(e : %s) { %s.Invoke(this, e); if (e != null) e.Default(); }",
				name, type, name);
		}
		if (procName != null)
		{
			WriteLine("");
			WriteLine("\tfunction %s(uMsg, wParam, lParam)", procName);
			WriteLine("\t{");
			WriteLine("\t\tswitch (%s)", procKey);
			WriteLine("\t\t{");
			for (int i = 0; i < types.Count; i++)
			{
				var mesg : StringList = mesgs.Get(i);
				if (mesg.Count == 0) continue;
				for (int j = 0; j < mesg.Count; j++)
					WriteLine("\t\t\tcase %s:", mesg.Get(j));
				WriteLine(
					"\t\t\t\tOn%s(%s.FromMessage(prevWndProc, hWnd, uMsg, wParam, lParam));",
					names.Get(i), types.Get(i));
				WriteLine("\t\t\t\treturn 0;");
			}
			WriteLine("\t\t}");
			WriteLine("\t\treturn 1;");
			WriteLine("\t}");
		}
		WriteLine("}");
	}
}
