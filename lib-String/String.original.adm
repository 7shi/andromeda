class string
{
	static function FromInt(n)
	{
		return Format("%d", n);
	}
	
	static function FromChar(ch : char)
	{
		var ret = Alloc(1);
		((char*)ret)[0] = ch;
		return ret;
	}
	
	function Swap(start, length, s : string)
	{
		return Remove(start, length).Insert(start, s);
	}
	
	function Overwrite(start, s : string)
	{
		return Swap(start, s.Length, s);
	}
	
	function Left(length)
	{
		return Substring(0, length);
	}
	
	function Right(length)
	{
		return Substring(this.Length - length, length);
	}
	
	function CountWithLength(s : char*, length)
	{
		if (length < 1) return 0;
		int ret = 0, last = this.Length - length;
		for (int i = 0; i <= last; i++)
		{
			if (this[i] == s[0])
			{
				var ok = true;
				for (int j = 1; j < length; j++)
				{
					if (this[i + j] != s[j])
					{
						ok = false;
						break;
					}
				}
				if (ok)
				{
					ret++;
					i += length - 1;
				}
			}
		}
		return ret;
	}
	
	function Count(s : string)
	{
		return CountWithLength(s, s.Length);
	}
	
	function CountChar(ch : char)
	{
		return CountWithLength(addrof ch, 1);
	}
}
