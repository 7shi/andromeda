class OpCode
{
    var Address : Val32 = Val32.NewI(0);
    var data : byte[];
    var op1 : object;
    var op2 : object;
    bool relative;

    bool _ByteRelative;
    function get_ByteRelative : bool { return _ByteRelative; }
    function set_ByteRelative(value : bool) { _ByteRelative = value; }

    static function NewBytes(d : byte[]) : OpCode
    {
        var ret = new OpCode();
        ret.data = d;
        return ret;
    }

    static function NewString(text : string) : OpCode
    {
        var ret = new OpCode();
        ret.data = getASCIIBytes(text);
        return ret;
    }

    static function NewB(d : byte[], op : byte) : OpCode
    {
        var ret = new OpCode();
        ret.data = d;
        ret.op1 = Byte.New(op);
        return ret;
    }

    static function NewW(d : byte[], op : ushort) : OpCode
    {
        var ret = new OpCode();
        ret.data = d;
        ret.op1 = UShort.New(op);
        return ret;
    }

    static function NewD(d : byte[], op : Val32) : OpCode
    {
        var ret = new OpCode();
        ret.data = d;
        ret.op1 = op;
        return ret;
    }

    static function NewA(d : byte[], mem : Addr32) : OpCode
    {
        var ret = new OpCode();
        ret.data = d;
        ret.op2 = mem;
        return ret;
    }

    static function NewBA(d : byte[], op : byte, mem : Addr32) : OpCode
    {
        var ret = new OpCode();
        ret.data = d;
        ret.op1 = Byte.New(op);
        ret.op2 = mem;
        return ret;
    }

    static function NewWA(d : byte[], op : ushort, mem : Addr32) : OpCode
    {
        var ret = new OpCode();
        ret.data = d;
        ret.op1 = UShort.New(op);
        ret.op2 = mem;
        return ret;
    }

    static function NewDA(d : byte[], op : Val32, mem : Addr32) : OpCode
    {
        var ret = new OpCode();
        ret.data = d;
        ret.op1 = op;
        ret.op2 = mem;
        return ret;
    }

    static function NewWB(d : byte[], op1 : ushort, op2 : byte) : OpCode
    {
        var ret = new OpCode();
        ret.data = d;
        ret.op1 = UShort.New(op1);
        ret.op2 = Byte.New(op2);
        return ret;
    }

    static function NewDRel(d : byte[], op : Val32, rel : bool) : OpCode
    {
        var ret = new OpCode();
        ret.data = d;
        ret.op1 = op;
        ret.relative = rel;
        return ret;
    }

    function Set(src : OpCode)
    {
        data = src.data;
        op1 = src.op1;
        op2 = src.op2;
        relative = src.relative;
    }

    function GetCodes()
    {
        var data = this.data;
        if (this.op2 is Addr32)
            data = Util.Concat(data, (op2 as Addr32).GetCodes());
        if (op1 == null)
            return data;
        if (this.op1 is Byte)
            data = Util.AddByteToBytes(data, (op1 as Byte).Value);
        else if (this.op1 is UShort)
            data = Util.AddUShortToBytes(data, (op1 as UShort).Value);
        else if (this.op1 is Val32)
        {
            var val = (op1 as Val32).Value;
            if (ByteRelative)
            {
                val -= Address.Value + (uint)data.Length + 1;
                data = Util.AddByteToBytes(data, (byte)val);
            }
            else
            {
                if (relative)
                    val -= Address.Value + (uint)data.Length + 4;
                data = Util.AddUIntToBytes(data, val);
            }
        }
        else
        {
            raise("The method or operation is not implemented.");
        }
        if (this.op2 is Byte)
            data = Util.Concat(data, Util.GetBytes1((op2 as Byte).Value));
        return data;
    }

    function Write(block : Block32)
    {
        if (this.op1 is Val32 && relative)
        {
            block.AddBytes(GetCodes());
        }
        else if (data != null)
        {
            block.AddBytes(data);
            if (this.op2 is Addr32)
                (op2 as Addr32).Write(block);
            if (op1 != null)
            {
                if (this.op1 is Byte)
                    block.AddByte2(op1 as Byte);
                else if (this.op1 is UShort)
                    block.AddUShort2(op1 as UShort);
                else if (this.op1 is Val32)
                    block.AddVal32(op1 as Val32);
                else
                    raise("The method or operation is not implemented.");
            }
            if (this.op2 is Byte)
                block.AddByte2(op2 as Byte);
        }
    }

    function Test(mnemonic : string, data : string)
    {
        var datastr = BitConverter.ToString(GetCodes());
        if (data != datastr)
        {
            raise(string.Format("[Test 1 failed] %s\r\n\tOK: %s\r\n\tNG: %s", mnemonic, data, datastr));
        }
        var block = new Block32();
        Write(block);
        var datastr2 = BitConverter.ToString(block.ToByteArray());
        if (data != datastr2)
        {
            raise(string.Format("[Test 2 failed] %s\r\n\tOK: %s\r\n\tNG: %s", mnemonic, data, datastr2));
        }
    }
}
