#pragma output("Generator.exe")
_Finish _finish;

printfln("// generated from Structs.xml");

var xx = new ExcelXML;
if (xx.Open("Structs.xml"))
{
	var line : string[];
	int head = 0, lnum = 0;
	while ((line = xx.ReadLine()) != null)
	{
		var len = line.Length - head;
		lnum++;
		if (len < 1) continue;
		var cmd = line[head];
		switch (cmd)
		{
			case "head":
				if (len < 2)
					printfln("// %d: %s: 引数がありません。", lnum, cmd);
				else
					head = line[head + 1].ToInt();
				break;
			case "struct":
				if (len < 2)
					printfln("// %d: %s: 引数がありません。", lnum, cmd);
				else
				{
					println();
					ReadStruct(xx, line[head + 1], head);
				}
				break;
		}
	}
	xx.Close();
}
else
	printfln("// ファイルが開けません。");

function ReadStruct(xx : ExcelXML, name : string, head)
{
	var types = new StringList;
	var names = new StringList;
	var values = new StringList;
	int max_type = 0, max_name = 0, max_value = 0;
	var line : string[];
	while ((line = xx.ReadLine()) != null)
	{
		if (line.Length < head + 2 || string.IsNullOrEmpty(line[head]))
			break;
		types.Add(line[head]);
		names.Add(line[head + 1]);
		max_type = Math.Max(max_type, line[head].Length);
		max_name = Math.Max(max_name, line[head + 1].Length);
		if (line.Length >= head + 3 && !string.IsNullOrEmpty(line[head + 2]))
		{
			values.Add(line[head + 2]);
			max_value = Math.Max(max_value, line[head + 2].Length);
		}
		else
			values.Add(null);
	}
	
	printfln("struct %s", name);
	printfln("{");
	for (int i = 0; i < types.Count; i++)
	{
		if (values.Get(i) == null)
			printfln("\t%s %s;",
				types.Get(i).PadRight(max_type),
				names.Get(i));
		else
			printfln("\t%s %s = %s;",
				types.Get(i).PadRight(max_type),
				names.Get(i).PadRight(max_name),
				values.Get(i).PadLeft(max_value));
	}
	printfln("}");
}
