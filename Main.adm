printfln("Andromeda ver.%s", Root.VERSION);
var start = DateTime.Now;

var tests = Directory.GetFiles("not-Tests");
for (int i = 0; i < tests.Length; i++)
{
    var adm = tests[i];
    if (Path.GetExtension(adm) == ".adm")
        compile(adm, Path.ChangeExtension(adm, ".exe"), false);
}

println();
var t1 = DateTime.Now;
printfln("ここまでの所要時間: %s", t1.Sub(start).ToString());

compile("Main.adm", "admc.exe", true);

println();
var end = DateTime.Now;
printfln("総所要時間: %s", end.Sub(start).ToString());

{ _Finish _finish; }

function compile(src : string, output : string, verbose : bool)
{
    if (File.Exists(output)) return;

    println();
    var s = DateTime.Now;

    if (!verbose)
        printfln("パースしています...");
    var root = new Root;
    readDir(root, verbose, "lib-Core");
    if (verbose)
    {
        readDir(root, verbose, "lib-System");
        readDir(root, verbose, "CompilerLib");
        readDir(root, verbose, "Andromeda");
    }
    parse(root, verbose, src);

    if (verbose)
        printfln("型をチェックしています...");
    else
        printfln("コンパイルしています...");
    Function.CompileVerbose = verbose;
    var module = new Module;
    module.Specific.SubSystem = IMAGE_SUBSYSTEM.WINDOWS_CUI;
    var codes = OpModule.Create(module);
    root.AddCodes(codes);
    module.Text.OpCodes = codes.ToArray();

    printfln("リンクしています...");
    module.Link(output);
    printfln("出力しました: %s", output);

    var e = DateTime.Now;
    printfln("所要時間: %s", e.Sub(s).ToString());
}

function parse(root : Root, verbose : bool, src : string)
{
    var src2 = src.Replace("\\", "/");
    if (verbose)
        printfln("パースしています: %s", src2);
    var sr = new StreamReader;
    if (sr.Open(src))
    {
        root.ReadText(src2, sr.ReadToEnd());
        sr.Close();
    }
    else
        raise("ファイルが開けません。");
}

function readDir(root : Root, verbose : bool, dir : string)
{
    var dirs = Directory.GetDirectories(dir);
    for (int i = 0; i < dirs.Length; i++)
        readDir(root, verbose, dirs[i]);
    var files = Directory.GetFiles(dir);
    for (int i = 0; i < files.Length; i++)
    {
        var file = files[i];
        if (Path.GetExtension(file).ToLower() == ".adm")
            parse(root, verbose, file);
    }
}
