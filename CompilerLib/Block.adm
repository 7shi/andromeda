class Byte
{
    byte Value;

    static function New(v : byte) : Byte
    {
        var ret = new Byte();
        ret.Value = v;
        return ret;
    }
}

class UShort
{
    ushort Value;

    static function New(v : ushort) : UShort
    {
        var ret = new UShort();
        ret.Value = v;
        return ret;
    }
}

class UInt
{
    uint Value;

    static function New(v : uint) : UInt
    {
        var ret = new UInt();
        ret.Value = v;
        return ret;
    }
}

class Int
{
    int Value;

    static function New(v : int) : Int
    {
        var ret = new Int();
        ret.Value = v;
        return ret;
    }
}

class Block
{
    var data : ArrayList;
    uint length;
    uint Address;
    var relocs : VarList;

    function get_Length : uint
    {
        return length;
    }

    function get_Current : uint
    {
        return Address + length;
    }

    function get_Relocations
    {
        return relocs.ToArray();
    }

    function ctor
    {
        data = new ArrayList();
        relocs = new VarList();
    }

    static function New(addr : uint) : Block
    {
        var ret = new Block();
        ret.Address = addr;
        return ret;
    }

    function AddByte(v : byte)
    {
        data.Add(Byte.New(v));
        length += sizeof(byte);
    }

    function AddByte2(v : Byte)
    {
        data.Add(v);
        length += sizeof(byte);
    }

    function AddUShort(v : ushort)
    {
        data.Add(UShort.New(v));
        length += sizeof(ushort);
    }

    function AddUShort2(v : UShort)
    {
        data.Add(v);
        length += sizeof(ushort);
    }

    function AddUInt(v : uint)
    {
        data.Add(UInt.New(v));
        length += sizeof(uint);
    }

    function AddUInt2(v : UInt)
    {
        data.Add(v);
        length += sizeof(uint);
    }

    function AddInt(v : int)
    {
        data.Add(Int.New(v));
        length += sizeof(int );
    }

    function AddInt2(v : Int)
    {
        data.Add(v);
        length += sizeof(int );
    }

    function AddBytes(v : byte[])
    {
        data.Add(v);
        length += (uint)v.Length;
    }

    function AddChars(v : char[])
    {
        data.Add(v);
        length += (uint)v.Length;
    }

    function AddString(v : string)
    {
        data.Add(v);
        length += (uint)v.Length;
    }

    function AddVal32(v : Val32)
    {
        data.Add(v);
        if (v.IsNeedForRelocation)
            relocs.Add((var)length);
        length += sizeof(uint);
    }

    function AddBlock(block : Block)
    {
        for (int i = 0; i < block.data.Count; i++)
        {
            var obj = block.data.Get(i);
            if (obj is Byte)
                AddByte2((Byte)obj);
            else if (obj is UShort)
                AddUShort2((UShort)obj);
            else if (obj is UInt)
                AddUInt2((UInt)obj);
            else if (obj is Int)
                AddInt2((Int)obj);
            else if (obj is byte[])
                AddBytes((byte[])obj);
            else if (obj is char[])
                AddChars((char[])obj);
            else if (obj is string)
                AddString((string)obj);
            else if (obj is Block)
                AddBlock((Block)obj);
            else if (obj is Val32)
                AddVal32((Val32)obj);
            else
                raise("The method or operation is not implemented.");
        }
    }

    function Write(ms : MemoryStream)
    {
        for (int i = 0; i < data.Count; i++)
        {
            var obj = data.Get(i);
            if (obj is Byte)
                ms.WriteByte(((Byte)obj).Value);
            else if (obj is UShort)
                ms.WriteShort((short)((UShort)obj).Value);
            else if (obj is UInt)
                ms.WriteInt((int)((UInt)obj).Value);
            else if (obj is Int)
                ms.WriteInt(((Int)obj).Value);
            else if (obj is byte[])
                ms.Write((byte[])obj);
            else if (obj is char[])
            {
                var chars = (char[])obj;
                ms.WriteWithLength(chars, chars.Length * sizeof(char));
            }
            else if (obj is string)
                ms.WriteString((string)obj);
            else if (obj is Block)
                (obj as Block).Write(ms);
            else if (obj is Val32)
                ms.WriteInt((int)((Val32)obj).Value);
            else
                raise("The method or operation is not implemented.");
        }
    }

    function ToByteArray()
    {
        var ms = new MemoryStream();
        Write(ms);
        return ms.ToArray();
    }
}
