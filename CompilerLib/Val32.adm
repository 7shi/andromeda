class Val32
{
    var value : uint;
    var ref1 : Val32;
    var ref2 : Val32;
    var isInitialized : bool;
    var isNeedForRelocation : bool;

    function get_Reference : Val32
    {
        if (ref1 != null && ref2 == null)
            return ref1;
        else
            return null;
    }

    function set_Reference(value : Val32)
    {
        ref1 = value;
        ref2 = null;
    }

    function get_Value : uint
    {
        if (ref1 == null)
            return value;
        if (ref2 == null)
            return ref1.Value;
        return ref1.Value + ref2.Value;
    }

    function set_Value(value : uint)
    {
        if (ref1 != null && ref2 == null)
            ref1.Value = value;
        else
        {
            this.value = value;
            isInitialized = true;
        }
    }

    function get_IsInitialized : bool
    {
        if (ref1 != null && ref2 == null)
            return ref1.IsInitialized;
        else
            return isInitialized;
    }

    function get_IsNeedForRelocation : bool
    {
        if (ref1 != null && ref2 == null)
            return ref1.IsNeedForRelocation;
        else
            return isNeedForRelocation;
    }

    static function New(v : uint) : Val32
    {
        var ret = new Val32();
        ret.Value = v;
        return ret;
    }

    static function NewI(v : int) : Val32
    {
        return New((uint)v);
    }

    static function NewB(v : uint, reloc : bool) : Val32
    {
        var ret = New(v);
        ret.isNeedForRelocation = reloc;
        return ret;
    }

    static function New2(a : Val32, b : Val32) : Val32
    {
        var ret = new Val32();
        ret.isInitialized = a.isInitialized;
        ret.isNeedForRelocation = a.isNeedForRelocation;
        ret.ref1 = a;
        ret.ref2 = b;
        return ret;
    }
}
