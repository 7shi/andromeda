// This source code is generated by cs2adm.

class Util
{
    static function AddByteToBytes(b : byte[], v : byte)
    {
        int len = b.Length;
        var ret = new byte[len + 1];
        memcpy(ret, b, len);
        ret[len] = v;
        return ret;
    }

    static function AddUShortToBytes(b : byte[], v : ushort)
    {
        int len = b.Length;
        var ret = new byte[len + sizeof(ushort)];
        memcpy(ret, b, len);
        SetUShort(ret, len, v);
        return ret;
    }

    static function AddUIntToBytes(b : byte[], v : uint)
    {
        int len = b.Length;
        var ret = new byte[len + sizeof(uint)];
        memcpy(ret, b, len);
        SetUInt(ret, len, v);
        return ret;
    }

    static function AddBytesToByte(b1 : byte, b2 : byte[])
    {
        var ret = new byte[1 + b2.Length];
        ret[0] = b1;
        memcpy(addrof ret[1], b2, b2.Length);
        return ret;
    }

    static function Concat(b1 : byte[], b2 : byte[])
    {
        var ret = new byte[b1.Length + b2.Length];
        memcpy(ret, b1, b1.Length);
        memcpy(addrof ret[b1.Length], b2, b2.Length);
        return ret;
    }

    static function SetUShort(b : byte[], pos : int, v : ushort)
    {
        b[pos] = (byte)v;
        b[pos + 1] = (byte)(v >> 8);
    }

    static function SetUInt(b : byte[], pos : int, v : uint)
    {
        b[pos] = (byte)v;
        b[pos + 1] = (byte)(v >> 8);
        b[pos + 2] = (byte)(v >> 16);
        b[pos + 3] = (byte)(v >> 24);
    }
}
