class I386
{
    static function PushB(op1 : byte) : OpCode
    {
        return OpCode.NewB(Util.GetBytes1(0x6a), op1);
    }

    static function IncB(op1 : Reg8) : OpCode
    {
        return FromName1B("inc", op1);
    }

    static function IncBA(op1 : Addr32) : OpCode
    {
        return FromName1BA("inc", op1);
    }

    static function DecB(op1 : Reg8) : OpCode
    {
        return FromName1B("dec", op1);
    }

    static function DecBA(op1 : Addr32) : OpCode
    {
        return FromName1BA("dec", op1);
    }

    static function NotB(op1 : Reg8) : OpCode
    {
        return FromName1B("not", op1);
    }

    static function NotBA(op1 : Addr32) : OpCode
    {
        return FromName1BA("not", op1);
    }

    static function NegB(op1 : Reg8) : OpCode
    {
        return FromName1B("neg", op1);
    }

    static function NegBA(op1 : Addr32) : OpCode
    {
        return FromName1BA("neg", op1);
    }

    static function MulB(op1 : Reg8) : OpCode
    {
        return FromName1B("mul", op1);
    }

    static function MulBA(op1 : Addr32) : OpCode
    {
        return FromName1BA("mul", op1);
    }

    static function ImulB(op1 : Reg8) : OpCode
    {
        return FromName1B("imul", op1);
    }

    static function ImulBA(op1 : Addr32) : OpCode
    {
        return FromName1BA("imul", op1);
    }

    static function DivB(op1 : Reg8) : OpCode
    {
        return FromName1B("div", op1);
    }

    static function DivBA(op1 : Addr32) : OpCode
    {
        return FromName1BA("div", op1);
    }

    static function IdivB(op1 : Reg8) : OpCode
    {
        return FromName1B("idiv", op1);
    }

    static function IdivBA(op1 : Addr32) : OpCode
    {
        return FromName1BA("idiv", op1);
    }

    static function FromName1B(op : string, op1 : Reg8) : OpCode
    {
        switch (op)
        {
        case "inc":
            return OpCode.NewBytes(Util.GetBytes2(0xfe, (byte)(0xc0 + op1)));
        case "dec":
            return OpCode.NewBytes(Util.GetBytes2(0xfe, (byte)(0xc8 + op1)));
        case "not":
            return OpCode.NewBytes(Util.GetBytes2(0xf6, (byte)(0xd0 + op1)));
        case "neg":
            return OpCode.NewBytes(Util.GetBytes2(0xf6, (byte)(0xd8 + op1)));
        case "mul":
            return OpCode.NewBytes(Util.GetBytes2(0xf6, (byte)(0xe0 + op1)));
        case "imul":
            return OpCode.NewBytes(Util.GetBytes2(0xf6, (byte)(0xe8 + op1)));
        case "div":
            return OpCode.NewBytes(Util.GetBytes2(0xf6, (byte)(0xf0 + op1)));
        case "idiv":
            return OpCode.NewBytes(Util.GetBytes2(0xf6, (byte)(0xf8 + op1)));
        default:
            raise("invalid operator: " + op);
        }
    }

    static function FromName1BA(op : string, op1 : Addr32) : OpCode
    {
        switch (op)
        {
        case "inc":
            return OpCode.NewA(Util.GetBytes1(0xfe), op1);
        case "dec":
            return OpCode.NewA(Util.GetBytes1(0xfe), Addr32.NewAdM(op1, 1));
        case "not":
            return OpCode.NewA(Util.GetBytes1(0xf6), Addr32.NewAdM(op1, 2));
        case "neg":
            return OpCode.NewA(Util.GetBytes1(0xf6), Addr32.NewAdM(op1, 3));
        case "mul":
            return OpCode.NewA(Util.GetBytes1(0xf6), Addr32.NewAdM(op1, 4));
        case "imul":
            return OpCode.NewA(Util.GetBytes1(0xf6), Addr32.NewAdM(op1, 5));
        case "div":
            return OpCode.NewA(Util.GetBytes1(0xf6), Addr32.NewAdM(op1, 6));
        case "idiv":
            return OpCode.NewA(Util.GetBytes1(0xf6), Addr32.NewAdM(op1, 7));
        default:
            raise("invalid operator: " + op);
        }
    }
}
