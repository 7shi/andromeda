class I386
{
    static function PushWU(op1 : ushort) : OpCode
    {
        return OpCode.NewW(Util.GetBytes2(0x66, 0x68), op1);
    }

    static function PushW(op1 : Reg16) : OpCode
    {
        return FromName1W("push", op1);
    }

    static function PushWA(op1 : Addr32) : OpCode
    {
        return FromName1WA("push", op1);
    }

    static function PopW(op1 : Reg16) : OpCode
    {
        return FromName1W("pop", op1);
    }

    static function PopWA(op1 : Addr32) : OpCode
    {
        return FromName1WA("pop", op1);
    }

    static function IncW(op1 : Reg16) : OpCode
    {
        return FromName1W("inc", op1);
    }

    static function IncWA(op1 : Addr32) : OpCode
    {
        return FromName1WA("inc", op1);
    }

    static function DecW(op1 : Reg16) : OpCode
    {
        return FromName1W("dec", op1);
    }

    static function DecWA(op1 : Addr32) : OpCode
    {
        return FromName1WA("dec", op1);
    }

    static function NotW(op1 : Reg16) : OpCode
    {
        return FromName1W("not", op1);
    }

    static function NotWA(op1 : Addr32) : OpCode
    {
        return FromName1WA("not", op1);
    }

    static function NegW(op1 : Reg16) : OpCode
    {
        return FromName1W("neg", op1);
    }

    static function NegWA(op1 : Addr32) : OpCode
    {
        return FromName1WA("neg", op1);
    }

    static function MulW(op1 : Reg16) : OpCode
    {
        return FromName1W("mul", op1);
    }

    static function MulWA(op1 : Addr32) : OpCode
    {
        return FromName1WA("mul", op1);
    }

    static function ImulW(op1 : Reg16) : OpCode
    {
        return FromName1W("imul", op1);
    }

    static function ImulWA(op1 : Addr32) : OpCode
    {
        return FromName1WA("imul", op1);
    }

    static function DivW(op1 : Reg16) : OpCode
    {
        return FromName1W("div", op1);
    }

    static function DivWA(op1 : Addr32) : OpCode
    {
        return FromName1WA("div", op1);
    }

    static function IdivW(op1 : Reg16) : OpCode
    {
        return FromName1W("idiv", op1);
    }

    static function IdivWA(op1 : Addr32) : OpCode
    {
        return FromName1WA("idiv", op1);
    }

    static function FromName1W(op : string, op1 : Reg16) : OpCode
    {
        switch (op)
        {
        case "push":
            return OpCode.NewBytes(Util.GetBytes2(0x66, (byte)(0x50 + op1)));
        case "pop":
            return OpCode.NewBytes(Util.GetBytes2(0x66, (byte)(0x58 + op1)));
        case "inc":
            return OpCode.NewBytes(Util.GetBytes2(0x66, (byte)(0x40 + op1)));
        case "dec":
            return OpCode.NewBytes(Util.GetBytes2(0x66, (byte)(0x48 + op1)));
        case "not":
            return OpCode.NewBytes(Util.GetBytes3(0x66, 0xf7, (byte)(0xd0 + op1)));
        case "neg":
            return OpCode.NewBytes(Util.GetBytes3(0x66, 0xf7, (byte)(0xd8 + op1)));
        case "mul":
            return OpCode.NewBytes(Util.GetBytes3(0x66, 0xf7, (byte)(0xe0 + op1)));
        case "imul":
            return OpCode.NewBytes(Util.GetBytes3(0x66, 0xf7, (byte)(0xe8 + op1)));
        case "div":
            return OpCode.NewBytes(Util.GetBytes3(0x66, 0xf7, (byte)(0xf0 + op1)));
        case "idiv":
            return OpCode.NewBytes(Util.GetBytes3(0x66, 0xf7, (byte)(0xf8 + op1)));
        default:
            raise("invalid operator: " + op);
        }
    }

    static function FromName1WA(op : string, op1 : Addr32) : OpCode
    {
        switch (op)
        {
        case "push":
            return OpCode.NewA(Util.GetBytes2(0x66, 0xff), Addr32.NewAdM(op1, 6));
        case "pop":
            return OpCode.NewA(Util.GetBytes2(0x66, 0x8f), op1);
        case "inc":
            return OpCode.NewA(Util.GetBytes2(0x66, 0xff), op1);
        case "dec":
            return OpCode.NewA(Util.GetBytes2(0x66, 0xff), Addr32.NewAdM(op1, 1));
        case "not":
            return OpCode.NewA(Util.GetBytes2(0x66, 0xf7), Addr32.NewAdM(op1, 2));
        case "neg":
            return OpCode.NewA(Util.GetBytes2(0x66, 0xf7), Addr32.NewAdM(op1, 3));
        case "mul":
            return OpCode.NewA(Util.GetBytes2(0x66, 0xf7), Addr32.NewAdM(op1, 4));
        case "imul":
            return OpCode.NewA(Util.GetBytes2(0x66, 0xf7), Addr32.NewAdM(op1, 5));
        case "div":
            return OpCode.NewA(Util.GetBytes2(0x66, 0xf7), Addr32.NewAdM(op1, 6));
        case "idiv":
            return OpCode.NewA(Util.GetBytes2(0x66, 0xf7), Addr32.NewAdM(op1, 7));
        default:
            raise("invalid operator: " + op);
        }
    }
}
