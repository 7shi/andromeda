class UTF8
{
	static function GetStringLengthWithLength(buf : byte*, length)
	{
		int ret = 0;
		for (int i = 0; i < length; i++)
		{
			byte b = buf[i];
			if (b < 0xc2)
			{
			}
			else if (b < 0xe0)
			{
				if (i + 1 < length
					&& (buf[i + 1] & 0xc0) == 0x80)
				{
					i++;
				}
			}
			else if (b < 0xf0)
			{
				if (i + 2 < length
					&& (buf[i + 1] & 0xc0) == 0x80
					&& (buf[i + 2] & 0xc0) == 0x80)
				{
					char c = ((b & 0xf) << 12)
						+ ((buf[i + 1] & 0x3f) << 6)
						+  (buf[i + 2] & 0x3f);
					if (!(c < 0x800 || (0xd800 <= c && c < 0xe000)))
						i += 2;
				}
			}
			else if (b < 0xf8)
			{
				if (i + 3 < length
					&& (buf[i + 1] & 0xc0) == 0x80
					&& (buf[i + 2] & 0xc0) == 0x80
					&& (buf[i + 3] & 0xc0) == 0x80)
				{
					int ch = ((b & 7) << 18)
						+ ((buf[i + 1] & 0x3f) << 12)
						+ ((buf[i + 2] & 0x3f) <<  6)
						+  (buf[i + 3] & 0x3f);
					if (ch >= 0x10000)
					{
						ret++;
						i += 3;
					}
				}
			}
			ret++;
		}
		return ret;
	}
	
	static function GetStringLength(buf : byte[])
	{
		return GetStringLengthWithLength(buf, buf.Length);
	}
	
	static function GetStringWithLength(buf : byte*, length) : string
	{
		int len = GetStringLengthWithLength(buf, length);
		var ret = new char[len];
		int p = 0;
		for (int i = 0; i < length; i++)
		{
			char c = buf[i];
			if (c < 0x80)
			{
			}
			else if (c < 0xc2)
				c = '?';
			else if (c < 0xe0)
			{
				if (i + 1 < length
					&& (buf[i + 1] & 0xc0) == 0x80)
				{
					c = ((c & 0x1f) << 6)
						+ (buf[i + 1] & 0x3f);
					i++;
				}
			}
			else if (c < 0xf0)
			{
				if (i + 2 < length
					&& (buf[i + 1] & 0xc0) == 0x80
					&& (buf[i + 2] & 0xc0) == 0x80)
				{
					c = ((c & 0xf) << 12)
						+ ((buf[i + 1] & 0x3f) << 6)
						+  (buf[i + 2] & 0x3f);
					if (c < 0x800 || (0xd800 <= c && c < 0xe000))
						c = '?';
					else
						i += 2;
				}
				else
					c = '?';
			}
			else if (c < 0xf8)
			{
				if (i + 3 < length
					&& (buf[i + 1] & 0xc0) == 0x80
					&& (buf[i + 2] & 0xc0) == 0x80
					&& (buf[i + 3] & 0xc0) == 0x80)
				{
					int ch = ((c & 7) << 18)
						+ ((buf[i + 1] & 0x3f) << 12)
						+ ((buf[i + 2] & 0x3f) <<  6)
						+  (buf[i + 3] & 0x3f);
					if (ch < 0x10000)
						c = '?';
					else
					{
						ch -= 0x10000;
						ret[p++] = 0xd800 + (ch >> 10);
						c = 0xdc00 + (ch & 0x3ff);
						i += 3;
					}
				}
				else
					c = '?';
			}
			else
				c = '?';
			ret[p++] = c;
		}
		return ret;
	}
	
	static function GetString(buf : byte[])
	{
		return GetStringWithLength(buf, buf.Length);
	}
}
