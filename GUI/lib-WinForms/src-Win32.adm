// このファイルは src-Win32.xml から生成されました。
// 再生成で変更内容が失われるため直接編集しないでください。

const int SWP_NOSIZE         =    0x1;
const int SWP_NOMOVE         =    0x2;
const int SWP_NOZORDER       =    0x4;
const int SWP_NOREDRAW       =    0x8;
const int SWP_NOACTIVATE     =   0x10;
const int SWP_DRAWFRAME      =   0x20;
const int SWP_FRAMECHANGED   =   0x20;
const int SWP_SHOWWINDOW     =   0x40;
const int SWP_HIDEWINDOW     =   0x80;
const int SWP_NOCOPYBITS     =  0x100;
const int SWP_NOOWNERZORDER  =  0x200;
const int SWP_NOREPOSITION   =  0x200;
const int SWP_NOSENDCHANGING =  0x400;
const int SWP_DEFERERASE     = 0x2000;
const int SWP_ASYNCWINDOWPOS = 0x4000;

const int WS_OVERLAPPED       =        0x0;
const int WS_TILED            =        0x0;
const int WS_ACTIVECAPTION    =        0x1;
const int WS_MAXIMIZEBOX      =    0x10000;
const int WS_TABSTOP          =    0x10000;
const int WS_GROUP            =    0x20000;
const int WS_MINIMIZEBOX      =    0x20000;
const int WS_SIZEBOX          =    0x40000;
const int WS_THICKFRAME       =    0x40000;
const int WS_SYSMENU          =    0x80000;
const int WS_HSCROLL          =   0x100000;
const int WS_VSCROLL          =   0x200000;
const int WS_DLGFRAME         =   0x400000;
const int WS_BORDER           =   0x800000;
const int WS_CAPTION          =   0xC00000;
const int WS_OVERLAPPEDWINDOW =   0xCF0000;
const int WS_TILEDWINDOW      =   0xCF0000;
const int WS_MAXIMIZE         =  0x1000000;
const int WS_CLIPCHILDREN     =  0x2000000;
const int WS_CLIPSIBLINGS     =  0x4000000;
const int WS_DISABLED         =  0x8000000;
const int WS_VISIBLE          = 0x10000000;
const int WS_ICONIC           = 0x20000000;
const int WS_MINIMIZE         = 0x20000000;
const int WS_CHILD            = 0x40000000;
const int WS_CHILDWINDOW      = 0x40000000;
const int WS_POPUP            = 0x80000000;
const int WS_POPUPWINDOW      = 0x80880000;

const int WS_EX_LEFT             =       0x0;
const int WS_EX_LTRREADING       =       0x0;
const int WS_EX_RIGHTSCROLLBAR   =       0x0;
const int WS_EX_DLGMODALFRAME    =       0x1;
const int WS_EX_NOPARENTNOTIFY   =       0x4;
const int WS_EX_TOPMOST          =       0x8;
const int WS_EX_ACCEPTFILES      =      0x10;
const int WS_EX_TRANSPARENT      =      0x20;
const int WS_EX_MDICHILD         =      0x40;
const int WS_EX_TOOLWINDOW       =      0x80;
const int WS_EX_WINDOWEDGE       =     0x100;
const int WS_EX_PALETTEWINDOW    =     0x188;
const int WS_EX_CLIENTEDGE       =     0x200;
const int WS_EX_OVERLAPPEDWINDOW =     0x300;
const int WS_EX_CONTEXTHELP      =     0x400;
const int WS_EX_RIGHT            =    0x1000;
const int WS_EX_RTLREADING       =    0x2000;
const int WS_EX_LEFTSCROLLBAR    =    0x4000;
const int WS_EX_CONTROLPARENT    =   0x10000;
const int WS_EX_STATICEDGE       =   0x20000;
const int WS_EX_APPWINDOW        =   0x40000;
const int WS_EX_LAYERED          =   0x80000;
const int WS_EX_NOINHERITLAYOUT  =  0x100000;
const int WS_EX_LAYOUTRTL        =  0x400000;
const int WS_EX_COMPOSITED       = 0x2000000;
const int WS_EX_NOACTIVATE       = 0x8000000;

const int ES_LEFT        =    0x0;
const int ES_CENTER      =    0x1;
const int ES_RIGHT       =    0x2;
const int ES_MULTILINE   =    0x4;
const int ES_UPPERCASE   =    0x8;
const int ES_LOWERCASE   =   0x10;
const int ES_PASSWORD    =   0x20;
const int ES_AUTOVSCROLL =   0x40;
const int ES_AUTOHSCROLL =   0x80;
const int ES_NOHIDESEL   =  0x100;
const int ES_OEMCONVERT  =  0x400;
const int ES_READONLY    =  0x800;
const int ES_WANTRETURN  = 0x1000;
const int ES_NUMBER      = 0x2000;

const int IDC_ARROW       = 32512;
const int IDC_IBEAM       = 32513;
const int IDC_WAIT        = 32514;
const int IDC_CROSS       = 32515;
const int IDC_UPARROW     = 32516;
const int IDC_SIZE        = 32640;
const int IDC_ICON        = 32641;
const int IDC_SIZENWSE    = 32642;
const int IDC_SIZENESW    = 32643;
const int IDC_SIZEWE      = 32644;
const int IDC_SIZENS      = 32645;
const int IDC_SIZEALL     = 32646;
const int IDC_NO          = 32648;
const int IDC_HAND        = 32649;
const int IDC_APPSTARTING = 32650;
const int IDC_HELP        = 32651;

const int MB_OK                   =      0x0;
const int MB_OKCANCEL             =      0x1;
const int MB_ABORTRETRYIGNORE     =      0x2;
const int MB_YESNOCANCEL          =      0x3;
const int MB_YESNO                =      0x4;
const int MB_RETRYCANCEL          =      0x5;
const int MB_CANCELTRYCONTINUE    =      0x6;
const int MB_TYPEMASK             =      0xF;
const int MB_ICONERROR            =     0x10;
const int MB_ICONHAND             =     0x10;
const int MB_ICONSTOP             =     0x10;
const int MB_ICONQUESTION         =     0x20;
const int MB_ICONEXCLAMATION      =     0x30;
const int MB_ICONWARNING          =     0x30;
const int MB_ICONASTERISK         =     0x40;
const int MB_ICONINFORMATION      =     0x40;
const int MB_USERICON             =     0x80;
const int MB_ICONMASK             =     0xF0;
const int MB_DEFBUTTON1           =      0x0;
const int MB_DEFBUTTON2           =    0x100;
const int MB_DEFBUTTON3           =    0x200;
const int MB_DEFBUTTON4           =    0x300;
const int MB_DEFMASK              =    0xF00;
const int MB_APPLMODAL            =      0x0;
const int MB_SYSTEMMODAL          =   0x1000;
const int MB_TASKMODAL            =   0x2000;
const int MB_MODEMASK             =   0x3000;
const int MB_HELP                 =   0x4000;
const int MB_NOFOCUS              =   0x8000;
const int MB_MISCMASK             =   0xC000;
const int MB_SETFOREGROUND        =  0x10000;
const int MB_DEFAULT_DESKTOP_ONLY =  0x20000;
const int MB_TOPMOST              =  0x40000;
const int MB_RIGHT                =  0x80000;
const int MB_RTLREADING           = 0x100000;

const int SW_HIDE            =  0;
const int SW_NORMAL          =  1;
const int SW_SHOWNORMAL      =  1;
const int SW_PARENTCLOSING   =  1;
const int SW_SCROLLCHILDREN  =  1;
const int SW_SHOWMINIMIZED   =  2;
const int SW_OTHERZOOM       =  2;
const int SW_INVALIDATE      =  2;
const int SW_MAXIMIZE        =  3;
const int SW_SHOWMAXIMIZED   =  3;
const int SW_PARENTOPENING   =  3;
const int SW_SHOWNOACTIVATE  =  4;
const int SW_OTHERUNZOOM     =  4;
const int SW_ERASE           =  4;
const int SW_SHOW            =  5;
const int SW_MINIMIZE        =  6;
const int SW_SHOWMINNOACTIVE =  7;
const int SW_SHOWNA          =  8;
const int SW_RESTORE         =  9;
const int SW_SHOWDEFAULT     = 10;
const int SW_FORCEMINIMIZE   = 11;
const int SW_MAX             = 11;
const int SW_SMOOTHSCROLL    = 16;

const int CS_VREDRAW         =     0x1;
const int CS_HREDRAW         =     0x2;
const int CS_KEYCVTWINDOW    =     0x4;
const int CS_DBLCLKS         =     0x8;
const int CS_OWNDC           =    0x20;
const int CS_CLASSDC         =    0x40;
const int CS_PARENTDC        =    0x80;
const int CS_NOKEYCVT        =   0x100;
const int CS_NOCLOSE         =   0x200;
const int CS_SAVEBITS        =   0x800;
const int CS_BYTEALIGNCLIENT =  0x1000;
const int CS_BYTEALIGNWINDOW =  0x2000;
const int CS_GLOBALCLASS     =  0x4000;
const int CS_IME             = 0x10000;

const int MIIM_STATE      =   0x1;
const int MIIM_ID         =   0x2;
const int MIIM_SUBMENU    =   0x4;
const int MIIM_CHECKMARKS =   0x8;
const int MIIM_TYPE       =  0x10;
const int MIIM_DATA       =  0x20;
const int MIIM_STRING     =  0x40;
const int MIIM_BITMAP     =  0x80;
const int MIIM_FTYPE      = 0x100;

const int MFT_STRING       =    0x0;
const int MFT_BITMAP       =    0x4;
const int MFT_MENUBARBREAK =   0x20;
const int MFT_MENUBREAK    =   0x40;
const int MFT_OWNERDRAW    =  0x100;
const int MFT_RADIOCHECK   =  0x200;
const int MFT_SEPARATOR    =  0x800;
const int MFT_RIGHTORDER   = 0x2000;
const int MFT_RIGHTJUSTIFY = 0x4000;

const int MFS_ENABLED   =    0x0;
const int MFS_UNCHECKED =    0x0;
const int MFS_UNHILITE  =    0x0;
const int MFS_DISABLED  =    0x3;
const int MFS_GRAYED    =    0x3;
const int MFS_CHECKED   =    0x8;
const int MFS_HILITE    =   0x80;
const int MFS_DEFAULT   = 0x1000;

const int COLOR_SCROLLBAR               =  0;
const int COLOR_BACKGROUND              =  1;
const int COLOR_DESKTOP                 =  1;
const int COLOR_ACTIVECAPTION           =  2;
const int COLOR_INACTIVECAPTION         =  3;
const int COLOR_MENU                    =  4;
const int COLOR_WINDOW                  =  5;
const int COLOR_WINDOWFRAME             =  6;
const int COLOR_MENUTEXT                =  7;
const int COLOR_WINDOWTEXT              =  8;
const int COLOR_CAPTIONTEXT             =  9;
const int COLOR_ACTIVEBORDER            = 10;
const int COLOR_INACTIVEBORDER          = 11;
const int COLOR_APPWORKSPACE            = 12;
const int COLOR_HIGHLIGHT               = 13;
const int COLOR_HIGHLIGHTTEXT           = 14;
const int COLOR_3DFACE                  = 15;
const int COLOR_BTNFACE                 = 15;
const int COLOR_3DSHADOW                = 16;
const int COLOR_BTNSHADOW               = 16;
const int COLOR_GRAYTEXT                = 17;
const int COLOR_BTNTEXT                 = 18;
const int COLOR_INACTIVECAPTIONTEXT     = 19;
const int COLOR_3DHILIGHT               = 20;
const int COLOR_3DHIGHLIGHT             = 20;
const int COLOR_BTNHILIGHT              = 20;
const int COLOR_BTNHIGHLIGHT            = 20;
const int COLOR_3DDKSHADOW              = 21;
const int COLOR_3DLIGHT                 = 22;
const int COLOR_INFOTEXT                = 23;
const int COLOR_INFOBK                  = 24;
const int COLOR_HOTLIGHT                = 26;
const int COLOR_GRADIENTACTIVECAPTION   = 27;
const int COLOR_GRADIENTINACTIVECAPTION = 28;

const int MK_LBUTTON  =  1;
const int MK_RBUTTON  =  2;
const int MK_SHIFT    =  4;
const int MK_CONTROL  =  8;
const int MK_MBUTTON  = 16;
const int MK_XBUTTON1 = 32;
const int MK_XBUTTON2 = 64;

const int PM_NOREMOVE = 0;
const int PM_REMOVE   = 1;
const int PM_NOYIELD  = 2;

const int OFN_SHAREWARN            =       0x0;
const int OFN_READONLY             =       0x1;
const int OFN_SHARENOWARN          =       0x1;
const int OFN_OVERWRITEPROMPT      =       0x2;
const int OFN_SHAREFALLTHROUGH     =       0x2;
const int OFN_HIDEREADONLY         =       0x4;
const int OFN_NOCHANGEDIR          =       0x8;
const int OFN_SHOWHELP             =      0x10;
const int OFN_ENABLEHOOK           =      0x20;
const int OFN_ENABLETEMPLATE       =      0x40;
const int OFN_ENABLETEMPLATEHANDLE =      0x80;
const int OFN_NOVALIDATE           =     0x100;
const int OFN_ALLOWMULTISELECT     =     0x200;
const int OFN_EXTENSIONDIFFERENT   =     0x400;
const int OFN_PATHMUSTEXIST        =     0x800;
const int OFN_FILEMUSTEXIST        =    0x1000;
const int OFN_CREATEPROMPT         =    0x2000;
const int OFN_SHAREAWARE           =    0x4000;
const int OFN_NOREADONLYRETURN     =    0x8000;
const int OFN_NOTESTFILECREATE     =   0x10000;
const int OFN_NONETWORKBUTTON      =   0x20000;
const int OFN_NOLONGNAMES          =   0x40000;
const int OFN_EXPLORER             =   0x80000;
const int OFN_NODEREFERENCELINKS   =  0x100000;
const int OFN_NODEREFERENCELINKS   =  0x100000;
const int OFN_LONGNAMES            =  0x200000;
const int OFN_ENABLESIZING         =  0x800000;
const int OFN_DONTADDTORECENT      = 0x2000000;

const int GCL_MENUNAME      =  -8;
const int GCL_HBRBACKGROUND = -10;
const int GCL_HCURSOR       = -12;
const int GCL_HICON         = -14;
const int GCL_HMODULE       = -16;
const int GCL_CBWNDEXTRA    = -18;
const int GCL_CBCLSEXTRA    = -20;
const int GCL_WNDPROC       = -24;
const int GCL_STYLE         = -26;
const int GCL_HICONSM       = -34;

const int GWL_WNDPROC    =  -4;
const int GWL_HINSTANCE  =  -6;
const int GWL_HWNDPARENT =  -8;
const int GWL_ID         = -12;
const int GWL_STYLE      = -16;
const int GWL_EXSTYLE    = -20;
const int GWL_USERDATA   = -21;
const int DWL_MSGRESULT  =   0;
const int DWL_DLGPROC    =   4;
const int DWL_USER       =   8;

const int RDW_INVALIDATE      =   0x1;
const int RDW_INTERNALPAINT   =   0x2;
const int RDW_ERASE           =   0x4;
const int RDW_VALIDATE        =   0x8;
const int RDW_NOINTERNALPAINT =  0x10;
const int RDW_NOERASE         =  0x20;
const int RDW_NOCHILDREN      =  0x40;
const int RDW_ALLCHILDREN     =  0x80;
const int RDW_UPDATENOW       = 0x100;
const int RDW_ERASENOW        = 0x200;
const int RDW_FRAME           = 0x400;
const int RDW_NOFRAME         = 0x800;

const int BI_RGB         =          0;
const int CW_USEDEFAULT  = 0x80000000;
const int DIB_RGB_COLORS =          0;
const int LF_FACESIZE    =         32;
const int LOGPIXELSY     =         90;
const int TRANSPARENT    =          1;
const int OPAQUE         =          2;

const int SPI_GETBEEP                     =    0x1;
const int SPI_SETBEEP                     =    0x2;
const int SPI_GETMOUSE                    =    0x3;
const int SPI_SETMOUSE                    =    0x4;
const int SPI_GETBORDER                   =    0x5;
const int SPI_SETBORDER                   =    0x6;
const int SPI_GETKEYBOARDSPEED            =    0xA;
const int SPI_SETKEYBOARDSPEED            =    0xB;
const int SPI_LANGDRIVER                  =    0xC;
const int SPI_ICONHORIZONTALSPACING       =    0xD;
const int SPI_GETSCREENSAVETIMEOUT        =    0xE;
const int SPI_SETSCREENSAVETIMEOUT        =    0xF;
const int SPI_GETSCREENSAVEACTIVE         =   0x10;
const int SPI_SETSCREENSAVEACTIVE         =   0x11;
const int SPI_GETGRIDGRANULARITY          =   0x12;
const int SPI_SETGRIDGRANULARITY          =   0x13;
const int SPI_SETDESKWALLPAPER            =   0x14;
const int SPI_SETDESKPATTERN              =   0x15;
const int SPI_GETKEYBOARDDELAY            =   0x16;
const int SPI_SETKEYBOARDDELAY            =   0x17;
const int SPI_ICONVERTICALSPACING         =   0x18;
const int SPI_GETICONTITLEWRAP            =   0x19;
const int SPI_SETICONTITLEWRAP            =   0x1A;
const int SPI_GETMENUDROPALIGNMENT        =   0x1B;
const int SPI_SETMENUDROPALIGNMENT        =   0x1C;
const int SPI_SETDOUBLECLKWIDTH           =   0x1D;
const int SPI_SETDOUBLECLKHEIGHT          =   0x1E;
const int SPI_GETICONTITLELOGFONT         =   0x1F;
const int SPI_SETDOUBLECLICKTIME          =   0x20;
const int SPI_SETMOUSEBUTTONSWAP          =   0x21;
const int SPI_SETICONTITLELOGFONT         =   0x22;
const int SPI_GETFASTTASKSWITCH           =   0x23;
const int SPI_SETFASTTASKSWITCH           =   0x24;
const int SPI_SETDRAGFULLWINDOWS          =   0x25;
const int SPI_GETDRAGFULLWINDOWS          =   0x26;
const int SPI_GETNONCLIENTMETRICS         =   0x29;
const int SPI_SETNONCLIENTMETRICS         =   0x2A;
const int SPI_GETMINIMIZEDMETRICS         =   0x2B;
const int SPI_SETMINIMIZEDMETRICS         =   0x2C;
const int SPI_GETICONMETRICS              =   0x2D;
const int SPI_SETICONMETRICS              =   0x2E;
const int SPI_SETWORKAREA                 =   0x2F;
const int SPI_GETWORKAREA                 =   0x30;
const int SPI_SETPENWINDOWS               =   0x31;
const int SPI_GETFILTERKEYS               =   0x32;
const int SPI_SETFILTERKEYS               =   0x33;
const int SPI_GETTOGGLEKEYS               =   0x34;
const int SPI_SETTOGGLEKEYS               =   0x35;
const int SPI_GETMOUSEKEYS                =   0x36;
const int SPI_SETMOUSEKEYS                =   0x37;
const int SPI_GETSHOWSOUNDS               =   0x38;
const int SPI_SETSHOWSOUNDS               =   0x39;
const int SPI_GETSTICKYKEYS               =   0x3A;
const int SPI_SETSTICKYKEYS               =   0x3B;
const int SPI_GETACCESSTIMEOUT            =   0x3C;
const int SPI_SETACCESSTIMEOUT            =   0x3D;
const int SPI_GETSERIALKEYS               =   0x3E;
const int SPI_SETSERIALKEYS               =   0x3F;
const int SPI_GETSOUNDSENTRY              =   0x40;
const int SPI_SETSOUNDSENTRY              =   0x41;
const int SPI_GETHIGHCONTRAST             =   0x42;
const int SPI_SETHIGHCONTRAST             =   0x43;
const int SPI_GETKEYBOARDPREF             =   0x44;
const int SPI_SETKEYBOARDPREF             =   0x45;
const int SPI_GETSCREENREADER             =   0x46;
const int SPI_SETSCREENREADER             =   0x47;
const int SPI_GETANIMATION                =   0x48;
const int SPI_SETANIMATION                =   0x49;
const int SPI_GETFONTSMOOTHING            =   0x4A;
const int SPI_SETFONTSMOOTHING            =   0x4B;
const int SPI_SETDRAGWIDTH                =   0x4C;
const int SPI_SETDRAGHEIGHT               =   0x4D;
const int SPI_SETHANDHELD                 =   0x4E;
const int SPI_GETLOWPOWERTIMEOUT          =   0x4F;
const int SPI_GETPOWEROFFTIMEOUT          =   0x50;
const int SPI_SETLOWPOWERTIMEOUT          =   0x51;
const int SPI_SETPOWEROFFTIMEOUT          =   0x52;
const int SPI_GETLOWPOWERACTIVE           =   0x53;
const int SPI_GETPOWEROFFACTIVE           =   0x54;
const int SPI_SETLOWPOWERACTIVE           =   0x55;
const int SPI_SETPOWEROFFACTIVE           =   0x56;
const int SPI_SETCURSORS                  =   0x57;
const int SPI_SETICONS                    =   0x58;
const int SPI_GETDEFAULTINPUTLANG         =   0x59;
const int SPI_SETDEFAULTINPUTLANG         =   0x5A;
const int SPI_SETLANGTOGGLE               =   0x5B;
const int SPI_GETWINDOWSEXTENSION         =   0x5C;
const int SPI_SETMOUSETRAILS              =   0x5D;
const int SPI_GETMOUSETRAILS              =   0x5E;
const int SPI_GETSNAPTODEFBUTTON          =   0x5F;
const int SPI_SETSNAPTODEFBUTTON          =   0x60;
const int SPI_SETSCREENSAVERRUNNING       =   0x61;
const int SPI_SCREENSAVERRUNNING          =   0x61;
const int SPI_GETMOUSEHOVERWIDTH          =   0x62;
const int SPI_SETMOUSEHOVERWIDTH          =   0x63;
const int SPI_GETMOUSEHOVERHEIGHT         =   0x64;
const int SPI_SETMOUSEHOVERHEIGHT         =   0x65;
const int SPI_GETMOUSEHOVERTIME           =   0x66;
const int SPI_SETMOUSEHOVERTIME           =   0x67;
const int SPI_GETWHEELSCROLLLINES         =   0x68;
const int SPI_SETWHEELSCROLLLINES         =   0x69;
const int SPI_GETMENUSHOWDELAY            =   0x6A;
const int SPI_SETMENUSHOWDELAY            =   0x6B;
const int SPI_GETWHEELSCROLLCHARS         =   0x6C;
const int SPI_SETWHEELSCROLLCHARS         =   0x6D;
const int SPI_GETSHOWIMEUI                =   0x6E;
const int SPI_SETSHOWIMEUI                =   0x6F;
const int SPI_GETMOUSESPEED               =   0x70;
const int SPI_SETMOUSESPEED               =   0x71;
const int SPI_GETSCREENSAVERRUNNING       =   0x72;
const int SPI_GETDESKWALLPAPER            =   0x73;
const int SPI_GETAUDIODESCRIPTION         =   0x74;
const int SPI_SETAUDIODESCRIPTION         =   0x75;
const int SPI_GETSCREENSAVESECURE         =   0x76;
const int SPI_SETSCREENSAVESECURE         =   0x77;
const int SPI_GETACTIVEWINDOWTRACKING     = 0x1000;
const int SPI_SETACTIVEWINDOWTRACKING     = 0x1001;
const int SPI_GETMENUANIMATION            = 0x1002;
const int SPI_SETMENUANIMATION            = 0x1003;
const int SPI_GETCOMBOBOXANIMATION        = 0x1004;
const int SPI_SETCOMBOBOXANIMATION        = 0x1005;
const int SPI_GETLISTBOXSMOOTHSCROLLING   = 0x1006;
const int SPI_SETLISTBOXSMOOTHSCROLLING   = 0x1007;
const int SPI_GETGRADIENTCAPTIONS         = 0x1008;
const int SPI_SETGRADIENTCAPTIONS         = 0x1009;
const int SPI_GETKEYBOARDCUES             = 0x100A;
const int SPI_GETMENUUNDERLINES           = 0x100A;
const int SPI_SETKEYBOARDCUES             = 0x100B;
const int SPI_SETMENUUNDERLINES           = 0x100B;
const int SPI_GETACTIVEWNDTRKZORDER       = 0x100C;
const int SPI_SETACTIVEWNDTRKZORDER       = 0x100D;
const int SPI_GETHOTTRACKING              = 0x100E;
const int SPI_SETHOTTRACKING              = 0x100F;
const int SPI_GETMENUFADE                 = 0x1012;
const int SPI_SETMENUFADE                 = 0x1013;
const int SPI_GETSELECTIONFADE            = 0x1014;
const int SPI_SETSELECTIONFADE            = 0x1015;
const int SPI_GETTOOLTIPANIMATION         = 0x1016;
const int SPI_SETTOOLTIPANIMATION         = 0x1017;
const int SPI_GETTOOLTIPFADE              = 0x1018;
const int SPI_SETTOOLTIPFADE              = 0x1019;
const int SPI_GETCURSORSHADOW             = 0x101A;
const int SPI_SETCURSORSHADOW             = 0x101B;
const int SPI_GETMOUSESONAR               = 0x101C;
const int SPI_SETMOUSESONAR               = 0x101D;
const int SPI_GETMOUSECLICKLOCK           = 0x101E;
const int SPI_SETMOUSECLICKLOCK           = 0x101F;
const int SPI_GETMOUSEVANISH              = 0x1020;
const int SPI_SETMOUSEVANISH              = 0x1021;
const int SPI_GETFLATMENU                 = 0x1022;
const int SPI_SETFLATMENU                 = 0x1023;
const int SPI_GETDROPSHADOW               = 0x1024;
const int SPI_SETDROPSHADOW               = 0x1025;
const int SPI_GETBLOCKSENDINPUTRESETS     = 0x1026;
const int SPI_SETBLOCKSENDINPUTRESETS     = 0x1027;
const int SPI_GETUIEFFECTS                = 0x103E;
const int SPI_SETUIEFFECTS                = 0x103F;
const int SPI_GETDISABLEOVERLAPPEDCONTENT = 0x1040;
const int SPI_SETDISABLEOVERLAPPEDCONTENT = 0x1041;
const int SPI_GETCLIENTAREAANIMATION      = 0x1042;
const int SPI_SETCLIENTAREAANIMATION      = 0x1043;
const int SPI_GETCLEARTYPE                = 0x1048;
const int SPI_SETCLEARTYPE                = 0x1049;
const int SPI_GETSPEECHRECOGNITION        = 0x104A;
const int SPI_SETSPEECHRECOGNITION        = 0x104B;
const int SPI_GETFOREGROUNDLOCKTIMEOUT    = 0x2000;
const int SPI_SETFOREGROUNDLOCKTIMEOUT    = 0x2001;
const int SPI_GETACTIVEWNDTRKTIMEOUT      = 0x2002;
const int SPI_SETACTIVEWNDTRKTIMEOUT      = 0x2003;
const int SPI_GETFOREGROUNDFLASHCOUNT     = 0x2004;
const int SPI_SETFOREGROUNDFLASHCOUNT     = 0x2005;
const int SPI_GETCARETWIDTH               = 0x2006;
const int SPI_SETCARETWIDTH               = 0x2007;
const int SPI_GETMOUSECLICKLOCKTIME       = 0x2008;
const int SPI_SETMOUSECLICKLOCKTIME       = 0x2009;
const int SPI_GETFONTSMOOTHINGTYPE        = 0x200A;
const int SPI_SETFONTSMOOTHINGTYPE        = 0x200B;
const int SPI_GETFONTSMOOTHINGCONTRAST    = 0x200C;
const int SPI_SETFONTSMOOTHINGCONTRAST    = 0x200D;
const int SPI_GETFOCUSBORDERWIDTH         = 0x200E;
const int SPI_SETFOCUSBORDERWIDTH         = 0x200F;
const int SPI_GETFOCUSBORDERHEIGHT        = 0x2010;
const int SPI_SETFOCUSBORDERHEIGHT        = 0x2011;
const int SPI_GETFONTSMOOTHINGORIENTATION = 0x2012;
const int SPI_SETFONTSMOOTHINGORIENTATION = 0x2013;
const int SPI_GETMINIMUMHITRADIUS         = 0x2014;
const int SPI_SETMINIMUMHITRADIUS         = 0x2015;
const int SPI_GETMESSAGEDURATION          = 0x2016;
const int SPI_SETMESSAGEDURATION          = 0x2017;

const int SPIF_UPDATEINIFILE    = 0x1;
const int SPIF_SENDWININICHANGE = 0x2;
const int SPIF_SENDCHANGE       = 0x2;

const int WM_NULL                   =    0x0;
const int WM_CREATE                 =    0x1;
const int WM_DESTROY                =    0x2;
const int WM_MOVE                   =    0x3;
const int WM_SIZE                   =    0x5;
const int WM_ACTIVATE               =    0x6;
const int WM_SETFOCUS               =    0x7;
const int WM_KILLFOCUS              =    0x8;
const int WM_ENABLE                 =    0xA;
const int WM_SETREDRAW              =    0xB;
const int WM_SETTEXT                =    0xC;
const int WM_GETTEXT                =    0xD;
const int WM_GETTEXTLENGTH          =    0xE;
const int WM_PAINT                  =    0xF;
const int WM_CLOSE                  =   0x10;
const int WM_QUERYENDSESSION        =   0x11;
const int WM_QUIT                   =   0x12;
const int WM_QUERYOPEN              =   0x13;
const int WM_ERASEBKGND             =   0x14;
const int WM_SYSCOLORCHANGE         =   0x15;
const int WM_ENDSESSION             =   0x16;
const int WM_SHOWWINDOW             =   0x18;
const int WM_SETTINGCHANGE          =   0x1A;
const int WM_WININICHANGE           =   0x1A;
const int WM_DEVMODECHANGE          =   0x1B;
const int WM_ACTIVATEAPP            =   0x1C;
const int WM_FONTCHANGE             =   0x1D;
const int WM_TIMECHANGE             =   0x1E;
const int WM_CANCELMODE             =   0x1F;
const int WM_SETCURSOR              =   0x20;
const int WM_MOUSEACTIVATE          =   0x21;
const int WM_CHILDACTIVATE          =   0x22;
const int WM_QUEUESYNC              =   0x23;
const int WM_GETMINMAXINFO          =   0x24;
const int WM_PAINTICON              =   0x26;
const int WM_ICONERASEBKGND         =   0x27;
const int WM_NEXTDLGCTL             =   0x28;
const int WM_SPOOLERSTATUS          =   0x2A;
const int WM_DRAWITEM               =   0x2B;
const int WM_MEASUREITEM            =   0x2C;
const int WM_DELETEITEM             =   0x2D;
const int WM_VKEYTOITEM             =   0x2E;
const int WM_CHARTOITEM             =   0x2F;
const int WM_SETFONT                =   0x30;
const int WM_GETFONT                =   0x31;
const int WM_SETHOTKEY              =   0x32;
const int WM_GETHOTKEY              =   0x33;
const int WM_QUERYDRAGICON          =   0x37;
const int WM_COMPAREITEM            =   0x39;
const int WM_COMPACTING             =   0x41;
const int WM_COMMNOTIFY             =   0x44;
const int WM_WINDOWPOSCHANGING      =   0x46;
const int WM_WINDOWPOSCHANGED       =   0x47;
const int WM_POWER                  =   0x48;
const int WM_COPYDATA               =   0x4A;
const int WM_CANCELJOURNAL          =   0x4B;
const int WM_NOTIFY                 =   0x4E;
const int WM_INPUTLANGCHANGEREQUEST =   0x50;
const int WM_INPUTLANGCHANGE        =   0x51;
const int WM_TCARD                  =   0x52;
const int WM_HELP                   =   0x53;
const int WM_USERCHANGED            =   0x54;
const int WM_NOTIFYFORMAT           =   0x55;
const int WM_CONTEXTMENU            =   0x7B;
const int WM_STYLECHANGING          =   0x7C;
const int WM_STYLECHANGED           =   0x7D;
const int WM_DISPLAYCHANGE          =   0x7E;
const int WM_GETICON                =   0x7F;
const int WM_SETICON                =   0x80;
const int WM_NCCREATE               =   0x81;
const int WM_NCDESTROY              =   0x82;
const int WM_NCCALCSIZE             =   0x83;
const int WM_NCHITTEST              =   0x84;
const int WM_NCPAINT                =   0x85;
const int WM_NCACTIVATE             =   0x86;
const int WM_GETDLGCODE             =   0x87;
const int WM_SYNCPAINT              =   0x88;
const int WM_NCMOUSEMOVE            =   0xA0;
const int WM_NCLBUTTONDOWN          =   0xA1;
const int WM_NCLBUTTONUP            =   0xA2;
const int WM_NCLBUTTONDBLCLK        =   0xA3;
const int WM_NCRBUTTONDOWN          =   0xA4;
const int WM_NCRBUTTONUP            =   0xA5;
const int WM_NCRBUTTONDBLCLK        =   0xA6;
const int WM_NCMBUTTONDOWN          =   0xA7;
const int WM_NCMBUTTONUP            =   0xA8;
const int WM_NCMBUTTONDBLCLK        =   0xA9;
const int WM_NCXBUTTONDOWN          =   0xAB;
const int WM_NCXBUTTONUP            =   0xAC;
const int WM_NCXBUTTONDBLCLK        =   0xAD;
const int WM_KEYDOWN                =  0x100;
const int WM_KEYFIRST               =  0x100;
const int WM_KEYUP                  =  0x101;
const int WM_CHAR                   =  0x102;
const int WM_DEADCHAR               =  0x103;
const int WM_SYSKEYDOWN             =  0x104;
const int WM_SYSKEYUP               =  0x105;
const int WM_SYSCHAR                =  0x106;
const int WM_SYSDEADCHAR            =  0x107;
const int WM_KEYLAST                =  0x108;
const int WM_INITDIALOG             =  0x110;
const int WM_COMMAND                =  0x111;
const int WM_SYSCOMMAND             =  0x112;
const int WM_TIMER                  =  0x113;
const int WM_HSCROLL                =  0x114;
const int WM_VSCROLL                =  0x115;
const int WM_INITMENU               =  0x116;
const int WM_INITMENUPOPUP          =  0x117;
const int WM_MENUSELECT             =  0x11F;
const int WM_MENUCHAR               =  0x120;
const int WM_ENTERIDLE              =  0x121;
const int WM_MENURBUTTONUP          =  0x122;
const int WM_MENUDRAG               =  0x123;
const int WM_MENUGETOBJECT          =  0x124;
const int WM_UNINITMENUPOPUP        =  0x125;
const int WM_MENUCOMMAND            =  0x126;
const int WM_CTLCOLORMSGBOX         =  0x132;
const int WM_CTLCOLOREDIT           =  0x133;
const int WM_CTLCOLORLISTBOX        =  0x134;
const int WM_CTLCOLORBTN            =  0x135;
const int WM_CTLCOLORDLG            =  0x136;
const int WM_CTLCOLORSCROLLBAR      =  0x137;
const int WM_CTLCOLORSTATIC         =  0x138;
const int WM_MOUSEMOVE              =  0x200;
const int WM_MOUSEFIRST             =  0x200;
const int WM_LBUTTONDOWN            =  0x201;
const int WM_LBUTTONUP              =  0x202;
const int WM_LBUTTONDBLCLK          =  0x203;
const int WM_RBUTTONDOWN            =  0x204;
const int WM_RBUTTONUP              =  0x205;
const int WM_RBUTTONDBLCLK          =  0x206;
const int WM_MBUTTONDOWN            =  0x207;
const int WM_MBUTTONUP              =  0x208;
const int WM_MBUTTONDBLCLK          =  0x209;
const int WM_MOUSEWHEEL             =  0x20A;
const int WM_MOUSELAST              =  0x20A;
const int WM_XBUTTONDOWN            =  0x20B;
const int WM_XBUTTONUP              =  0x20C;
const int WM_XBUTTONDBLCLK          =  0x20D;
const int WM_MOUSELAST              =  0x20D;
const int WM_PARENTNOTIFY           =  0x210;
const int WM_ENTERMENULOOP          =  0x211;
const int WM_EXITMENULOOP           =  0x212;
const int WM_NEXTMENU               =  0x213;
const int WM_NEXTMENU               =  0x213;
const int WM_SIZING                 =  0x214;
const int WM_CAPTURECHANGED         =  0x215;
const int WM_MOVING                 =  0x216;
const int WM_POWERBROADCAST         =  0x218;
const int WM_DEVICECHANGE           =  0x219;
const int WM_MDICREATE              =  0x220;
const int WM_MDIDESTROY             =  0x221;
const int WM_MDIACTIVATE            =  0x222;
const int WM_MDIRESTORE             =  0x223;
const int WM_MDINEXT                =  0x224;
const int WM_MDIMAXIMIZE            =  0x225;
const int WM_MDITILE                =  0x226;
const int WM_MDICASCADE             =  0x227;
const int WM_MDIICONARRANGE         =  0x228;
const int WM_MDIGETACTIVE           =  0x229;
const int WM_MDISETMENU             =  0x230;
const int WM_ENTERSIZEMOVE          =  0x231;
const int WM_EXITSIZEMOVE           =  0x232;
const int WM_DROPFILES              =  0x233;
const int WM_MDIREFRESHMENU         =  0x234;
const int WM_NCMOUSEHOVER           =  0x2A0;
const int WM_MOUSEHOVER             =  0x2A1;
const int WM_NCMOUSELEAVE           =  0x2A2;
const int WM_MOUSELEAVE             =  0x2A3;
const int WM_CUT                    =  0x300;
const int WM_COPY                   =  0x301;
const int WM_PASTE                  =  0x302;
const int WM_CLEAR                  =  0x303;
const int WM_UNDO                   =  0x304;
const int WM_RENDERFORMAT           =  0x305;
const int WM_RENDERALLFORMATS       =  0x306;
const int WM_DESTROYCLIPBOARD       =  0x307;
const int WM_DRAWCLIPBOARD          =  0x308;
const int WM_PAINTCLIPBOARD         =  0x309;
const int WM_VSCROLLCLIPBOARD       =  0x30A;
const int WM_SIZECLIPBOARD          =  0x30B;
const int WM_ASKCBFORMATNAME        =  0x30C;
const int WM_CHANGECBCHAIN          =  0x30D;
const int WM_HSCROLLCLIPBOARD       =  0x30E;
const int WM_QUERYNEWPALETTE        =  0x30F;
const int WM_PALETTEISCHANGING      =  0x310;
const int WM_PALETTECHANGED         =  0x311;
const int WM_HOTKEY                 =  0x312;
const int WM_PRINT                  =  0x317;
const int WM_PRINTCLIENT            =  0x318;
const int WM_THEMECHANGED           =  0x31A;
const int WM_HANDHELDFIRST          =  0x358;
const int WM_HANDHELDLAST           =  0x35F;
const int WM_AFXFIRST               =  0x360;
const int WM_AFXLAST                =  0x37F;
const int WM_PENWINFIRST            =  0x380;
const int WM_PENWINLAST             =  0x38F;
const int WM_USER                   =  0x400;
const int WM_APP                    = 0x8000;

function WM_Parse(s : string)
{
	switch (s)
	{
		case "NULL"                  : return WM_NULL;
		case "CREATE"                : return WM_CREATE;
		case "DESTROY"               : return WM_DESTROY;
		case "MOVE"                  : return WM_MOVE;
		case "SIZE"                  : return WM_SIZE;
		case "ACTIVATE"              : return WM_ACTIVATE;
		case "SETFOCUS"              : return WM_SETFOCUS;
		case "KILLFOCUS"             : return WM_KILLFOCUS;
		case "ENABLE"                : return WM_ENABLE;
		case "SETREDRAW"             : return WM_SETREDRAW;
		case "SETTEXT"               : return WM_SETTEXT;
		case "GETTEXT"               : return WM_GETTEXT;
		case "GETTEXTLENGTH"         : return WM_GETTEXTLENGTH;
		case "PAINT"                 : return WM_PAINT;
		case "CLOSE"                 : return WM_CLOSE;
		case "QUERYENDSESSION"       : return WM_QUERYENDSESSION;
		case "QUIT"                  : return WM_QUIT;
		case "QUERYOPEN"             : return WM_QUERYOPEN;
		case "ERASEBKGND"            : return WM_ERASEBKGND;
		case "SYSCOLORCHANGE"        : return WM_SYSCOLORCHANGE;
		case "ENDSESSION"            : return WM_ENDSESSION;
		case "SHOWWINDOW"            : return WM_SHOWWINDOW;
		case "SETTINGCHANGE"         : return WM_SETTINGCHANGE;
		case "WININICHANGE"          : return WM_WININICHANGE;
		case "DEVMODECHANGE"         : return WM_DEVMODECHANGE;
		case "ACTIVATEAPP"           : return WM_ACTIVATEAPP;
		case "FONTCHANGE"            : return WM_FONTCHANGE;
		case "TIMECHANGE"            : return WM_TIMECHANGE;
		case "CANCELMODE"            : return WM_CANCELMODE;
		case "SETCURSOR"             : return WM_SETCURSOR;
		case "MOUSEACTIVATE"         : return WM_MOUSEACTIVATE;
		case "CHILDACTIVATE"         : return WM_CHILDACTIVATE;
		case "QUEUESYNC"             : return WM_QUEUESYNC;
		case "GETMINMAXINFO"         : return WM_GETMINMAXINFO;
		case "PAINTICON"             : return WM_PAINTICON;
		case "ICONERASEBKGND"        : return WM_ICONERASEBKGND;
		case "NEXTDLGCTL"            : return WM_NEXTDLGCTL;
		case "SPOOLERSTATUS"         : return WM_SPOOLERSTATUS;
		case "DRAWITEM"              : return WM_DRAWITEM;
		case "MEASUREITEM"           : return WM_MEASUREITEM;
		case "DELETEITEM"            : return WM_DELETEITEM;
		case "VKEYTOITEM"            : return WM_VKEYTOITEM;
		case "CHARTOITEM"            : return WM_CHARTOITEM;
		case "SETFONT"               : return WM_SETFONT;
		case "GETFONT"               : return WM_GETFONT;
		case "SETHOTKEY"             : return WM_SETHOTKEY;
		case "GETHOTKEY"             : return WM_GETHOTKEY;
		case "QUERYDRAGICON"         : return WM_QUERYDRAGICON;
		case "COMPAREITEM"           : return WM_COMPAREITEM;
		case "COMPACTING"            : return WM_COMPACTING;
		case "COMMNOTIFY"            : return WM_COMMNOTIFY;
		case "WINDOWPOSCHANGING"     : return WM_WINDOWPOSCHANGING;
		case "WINDOWPOSCHANGED"      : return WM_WINDOWPOSCHANGED;
		case "POWER"                 : return WM_POWER;
		case "COPYDATA"              : return WM_COPYDATA;
		case "CANCELJOURNAL"         : return WM_CANCELJOURNAL;
		case "NOTIFY"                : return WM_NOTIFY;
		case "INPUTLANGCHANGEREQUEST": return WM_INPUTLANGCHANGEREQUEST;
		case "INPUTLANGCHANGE"       : return WM_INPUTLANGCHANGE;
		case "TCARD"                 : return WM_TCARD;
		case "HELP"                  : return WM_HELP;
		case "USERCHANGED"           : return WM_USERCHANGED;
		case "NOTIFYFORMAT"          : return WM_NOTIFYFORMAT;
		case "CONTEXTMENU"           : return WM_CONTEXTMENU;
		case "STYLECHANGING"         : return WM_STYLECHANGING;
		case "STYLECHANGED"          : return WM_STYLECHANGED;
		case "DISPLAYCHANGE"         : return WM_DISPLAYCHANGE;
		case "GETICON"               : return WM_GETICON;
		case "SETICON"               : return WM_SETICON;
		case "NCCREATE"              : return WM_NCCREATE;
		case "NCDESTROY"             : return WM_NCDESTROY;
		case "NCCALCSIZE"            : return WM_NCCALCSIZE;
		case "NCHITTEST"             : return WM_NCHITTEST;
		case "NCPAINT"               : return WM_NCPAINT;
		case "NCACTIVATE"            : return WM_NCACTIVATE;
		case "GETDLGCODE"            : return WM_GETDLGCODE;
		case "SYNCPAINT"             : return WM_SYNCPAINT;
		case "NCMOUSEMOVE"           : return WM_NCMOUSEMOVE;
		case "NCLBUTTONDOWN"         : return WM_NCLBUTTONDOWN;
		case "NCLBUTTONUP"           : return WM_NCLBUTTONUP;
		case "NCLBUTTONDBLCLK"       : return WM_NCLBUTTONDBLCLK;
		case "NCRBUTTONDOWN"         : return WM_NCRBUTTONDOWN;
		case "NCRBUTTONUP"           : return WM_NCRBUTTONUP;
		case "NCRBUTTONDBLCLK"       : return WM_NCRBUTTONDBLCLK;
		case "NCMBUTTONDOWN"         : return WM_NCMBUTTONDOWN;
		case "NCMBUTTONUP"           : return WM_NCMBUTTONUP;
		case "NCMBUTTONDBLCLK"       : return WM_NCMBUTTONDBLCLK;
		case "NCXBUTTONDOWN"         : return WM_NCXBUTTONDOWN;
		case "NCXBUTTONUP"           : return WM_NCXBUTTONUP;
		case "NCXBUTTONDBLCLK"       : return WM_NCXBUTTONDBLCLK;
		case "KEYDOWN"               : return WM_KEYDOWN;
		case "KEYFIRST"              : return WM_KEYFIRST;
		case "KEYUP"                 : return WM_KEYUP;
		case "CHAR"                  : return WM_CHAR;
		case "DEADCHAR"              : return WM_DEADCHAR;
		case "SYSKEYDOWN"            : return WM_SYSKEYDOWN;
		case "SYSKEYUP"              : return WM_SYSKEYUP;
		case "SYSCHAR"               : return WM_SYSCHAR;
		case "SYSDEADCHAR"           : return WM_SYSDEADCHAR;
		case "KEYLAST"               : return WM_KEYLAST;
		case "INITDIALOG"            : return WM_INITDIALOG;
		case "COMMAND"               : return WM_COMMAND;
		case "SYSCOMMAND"            : return WM_SYSCOMMAND;
		case "TIMER"                 : return WM_TIMER;
		case "HSCROLL"               : return WM_HSCROLL;
		case "VSCROLL"               : return WM_VSCROLL;
		case "INITMENU"              : return WM_INITMENU;
		case "INITMENUPOPUP"         : return WM_INITMENUPOPUP;
		case "MENUSELECT"            : return WM_MENUSELECT;
		case "MENUCHAR"              : return WM_MENUCHAR;
		case "ENTERIDLE"             : return WM_ENTERIDLE;
		case "MENURBUTTONUP"         : return WM_MENURBUTTONUP;
		case "MENUDRAG"              : return WM_MENUDRAG;
		case "MENUGETOBJECT"         : return WM_MENUGETOBJECT;
		case "UNINITMENUPOPUP"       : return WM_UNINITMENUPOPUP;
		case "MENUCOMMAND"           : return WM_MENUCOMMAND;
		case "CTLCOLORMSGBOX"        : return WM_CTLCOLORMSGBOX;
		case "CTLCOLOREDIT"          : return WM_CTLCOLOREDIT;
		case "CTLCOLORLISTBOX"       : return WM_CTLCOLORLISTBOX;
		case "CTLCOLORBTN"           : return WM_CTLCOLORBTN;
		case "CTLCOLORDLG"           : return WM_CTLCOLORDLG;
		case "CTLCOLORSCROLLBAR"     : return WM_CTLCOLORSCROLLBAR;
		case "CTLCOLORSTATIC"        : return WM_CTLCOLORSTATIC;
		case "MOUSEMOVE"             : return WM_MOUSEMOVE;
		case "MOUSEFIRST"            : return WM_MOUSEFIRST;
		case "LBUTTONDOWN"           : return WM_LBUTTONDOWN;
		case "LBUTTONUP"             : return WM_LBUTTONUP;
		case "LBUTTONDBLCLK"         : return WM_LBUTTONDBLCLK;
		case "RBUTTONDOWN"           : return WM_RBUTTONDOWN;
		case "RBUTTONUP"             : return WM_RBUTTONUP;
		case "RBUTTONDBLCLK"         : return WM_RBUTTONDBLCLK;
		case "MBUTTONDOWN"           : return WM_MBUTTONDOWN;
		case "MBUTTONUP"             : return WM_MBUTTONUP;
		case "MBUTTONDBLCLK"         : return WM_MBUTTONDBLCLK;
		case "MOUSEWHEEL"            : return WM_MOUSEWHEEL;
		case "MOUSELAST"             : return WM_MOUSELAST;
		case "XBUTTONDOWN"           : return WM_XBUTTONDOWN;
		case "XBUTTONUP"             : return WM_XBUTTONUP;
		case "XBUTTONDBLCLK"         : return WM_XBUTTONDBLCLK;
		case "MOUSELAST"             : return WM_MOUSELAST;
		case "PARENTNOTIFY"          : return WM_PARENTNOTIFY;
		case "ENTERMENULOOP"         : return WM_ENTERMENULOOP;
		case "EXITMENULOOP"          : return WM_EXITMENULOOP;
		case "NEXTMENU"              : return WM_NEXTMENU;
		case "NEXTMENU"              : return WM_NEXTMENU;
		case "SIZING"                : return WM_SIZING;
		case "CAPTURECHANGED"        : return WM_CAPTURECHANGED;
		case "MOVING"                : return WM_MOVING;
		case "POWERBROADCAST"        : return WM_POWERBROADCAST;
		case "DEVICECHANGE"          : return WM_DEVICECHANGE;
		case "MDICREATE"             : return WM_MDICREATE;
		case "MDIDESTROY"            : return WM_MDIDESTROY;
		case "MDIACTIVATE"           : return WM_MDIACTIVATE;
		case "MDIRESTORE"            : return WM_MDIRESTORE;
		case "MDINEXT"               : return WM_MDINEXT;
		case "MDIMAXIMIZE"           : return WM_MDIMAXIMIZE;
		case "MDITILE"               : return WM_MDITILE;
		case "MDICASCADE"            : return WM_MDICASCADE;
		case "MDIICONARRANGE"        : return WM_MDIICONARRANGE;
		case "MDIGETACTIVE"          : return WM_MDIGETACTIVE;
		case "MDISETMENU"            : return WM_MDISETMENU;
		case "ENTERSIZEMOVE"         : return WM_ENTERSIZEMOVE;
		case "EXITSIZEMOVE"          : return WM_EXITSIZEMOVE;
		case "DROPFILES"             : return WM_DROPFILES;
		case "MDIREFRESHMENU"        : return WM_MDIREFRESHMENU;
		case "NCMOUSEHOVER"          : return WM_NCMOUSEHOVER;
		case "MOUSEHOVER"            : return WM_MOUSEHOVER;
		case "NCMOUSELEAVE"          : return WM_NCMOUSELEAVE;
		case "MOUSELEAVE"            : return WM_MOUSELEAVE;
		case "CUT"                   : return WM_CUT;
		case "COPY"                  : return WM_COPY;
		case "PASTE"                 : return WM_PASTE;
		case "CLEAR"                 : return WM_CLEAR;
		case "UNDO"                  : return WM_UNDO;
		case "RENDERFORMAT"          : return WM_RENDERFORMAT;
		case "RENDERALLFORMATS"      : return WM_RENDERALLFORMATS;
		case "DESTROYCLIPBOARD"      : return WM_DESTROYCLIPBOARD;
		case "DRAWCLIPBOARD"         : return WM_DRAWCLIPBOARD;
		case "PAINTCLIPBOARD"        : return WM_PAINTCLIPBOARD;
		case "VSCROLLCLIPBOARD"      : return WM_VSCROLLCLIPBOARD;
		case "SIZECLIPBOARD"         : return WM_SIZECLIPBOARD;
		case "ASKCBFORMATNAME"       : return WM_ASKCBFORMATNAME;
		case "CHANGECBCHAIN"         : return WM_CHANGECBCHAIN;
		case "HSCROLLCLIPBOARD"      : return WM_HSCROLLCLIPBOARD;
		case "QUERYNEWPALETTE"       : return WM_QUERYNEWPALETTE;
		case "PALETTEISCHANGING"     : return WM_PALETTEISCHANGING;
		case "PALETTECHANGED"        : return WM_PALETTECHANGED;
		case "HOTKEY"                : return WM_HOTKEY;
		case "PRINT"                 : return WM_PRINT;
		case "PRINTCLIENT"           : return WM_PRINTCLIENT;
		case "THEMECHANGED"          : return WM_THEMECHANGED;
		case "HANDHELDFIRST"         : return WM_HANDHELDFIRST;
		case "HANDHELDLAST"          : return WM_HANDHELDLAST;
		case "AFXFIRST"              : return WM_AFXFIRST;
		case "AFXLAST"               : return WM_AFXLAST;
		case "PENWINFIRST"           : return WM_PENWINFIRST;
		case "PENWINLAST"            : return WM_PENWINLAST;
		case "USER"                  : return WM_USER;
		case "APP"                   : return WM_APP;
	}
	return -1;
}

function WM_ToString(value)
{
	switch (value)
	{
		case WM_NULL                  : return "NULL";
		case WM_CREATE                : return "CREATE";
		case WM_DESTROY               : return "DESTROY";
		case WM_MOVE                  : return "MOVE";
		case WM_SIZE                  : return "SIZE";
		case WM_ACTIVATE              : return "ACTIVATE";
		case WM_SETFOCUS              : return "SETFOCUS";
		case WM_KILLFOCUS             : return "KILLFOCUS";
		case WM_ENABLE                : return "ENABLE";
		case WM_SETREDRAW             : return "SETREDRAW";
		case WM_SETTEXT               : return "SETTEXT";
		case WM_GETTEXT               : return "GETTEXT";
		case WM_GETTEXTLENGTH         : return "GETTEXTLENGTH";
		case WM_PAINT                 : return "PAINT";
		case WM_CLOSE                 : return "CLOSE";
		case WM_QUERYENDSESSION       : return "QUERYENDSESSION";
		case WM_QUIT                  : return "QUIT";
		case WM_QUERYOPEN             : return "QUERYOPEN";
		case WM_ERASEBKGND            : return "ERASEBKGND";
		case WM_SYSCOLORCHANGE        : return "SYSCOLORCHANGE";
		case WM_ENDSESSION            : return "ENDSESSION";
		case WM_SHOWWINDOW            : return "SHOWWINDOW";
		case WM_SETTINGCHANGE         : return "SETTINGCHANGE";
		case WM_WININICHANGE          : return "WININICHANGE";
		case WM_DEVMODECHANGE         : return "DEVMODECHANGE";
		case WM_ACTIVATEAPP           : return "ACTIVATEAPP";
		case WM_FONTCHANGE            : return "FONTCHANGE";
		case WM_TIMECHANGE            : return "TIMECHANGE";
		case WM_CANCELMODE            : return "CANCELMODE";
		case WM_SETCURSOR             : return "SETCURSOR";
		case WM_MOUSEACTIVATE         : return "MOUSEACTIVATE";
		case WM_CHILDACTIVATE         : return "CHILDACTIVATE";
		case WM_QUEUESYNC             : return "QUEUESYNC";
		case WM_GETMINMAXINFO         : return "GETMINMAXINFO";
		case WM_PAINTICON             : return "PAINTICON";
		case WM_ICONERASEBKGND        : return "ICONERASEBKGND";
		case WM_NEXTDLGCTL            : return "NEXTDLGCTL";
		case WM_SPOOLERSTATUS         : return "SPOOLERSTATUS";
		case WM_DRAWITEM              : return "DRAWITEM";
		case WM_MEASUREITEM           : return "MEASUREITEM";
		case WM_DELETEITEM            : return "DELETEITEM";
		case WM_VKEYTOITEM            : return "VKEYTOITEM";
		case WM_CHARTOITEM            : return "CHARTOITEM";
		case WM_SETFONT               : return "SETFONT";
		case WM_GETFONT               : return "GETFONT";
		case WM_SETHOTKEY             : return "SETHOTKEY";
		case WM_GETHOTKEY             : return "GETHOTKEY";
		case WM_QUERYDRAGICON         : return "QUERYDRAGICON";
		case WM_COMPAREITEM           : return "COMPAREITEM";
		case WM_COMPACTING            : return "COMPACTING";
		case WM_COMMNOTIFY            : return "COMMNOTIFY";
		case WM_WINDOWPOSCHANGING     : return "WINDOWPOSCHANGING";
		case WM_WINDOWPOSCHANGED      : return "WINDOWPOSCHANGED";
		case WM_POWER                 : return "POWER";
		case WM_COPYDATA              : return "COPYDATA";
		case WM_CANCELJOURNAL         : return "CANCELJOURNAL";
		case WM_NOTIFY                : return "NOTIFY";
		case WM_INPUTLANGCHANGEREQUEST: return "INPUTLANGCHANGEREQUEST";
		case WM_INPUTLANGCHANGE       : return "INPUTLANGCHANGE";
		case WM_TCARD                 : return "TCARD";
		case WM_HELP                  : return "HELP";
		case WM_USERCHANGED           : return "USERCHANGED";
		case WM_NOTIFYFORMAT          : return "NOTIFYFORMAT";
		case WM_CONTEXTMENU           : return "CONTEXTMENU";
		case WM_STYLECHANGING         : return "STYLECHANGING";
		case WM_STYLECHANGED          : return "STYLECHANGED";
		case WM_DISPLAYCHANGE         : return "DISPLAYCHANGE";
		case WM_GETICON               : return "GETICON";
		case WM_SETICON               : return "SETICON";
		case WM_NCCREATE              : return "NCCREATE";
		case WM_NCDESTROY             : return "NCDESTROY";
		case WM_NCCALCSIZE            : return "NCCALCSIZE";
		case WM_NCHITTEST             : return "NCHITTEST";
		case WM_NCPAINT               : return "NCPAINT";
		case WM_NCACTIVATE            : return "NCACTIVATE";
		case WM_GETDLGCODE            : return "GETDLGCODE";
		case WM_SYNCPAINT             : return "SYNCPAINT";
		case WM_NCMOUSEMOVE           : return "NCMOUSEMOVE";
		case WM_NCLBUTTONDOWN         : return "NCLBUTTONDOWN";
		case WM_NCLBUTTONUP           : return "NCLBUTTONUP";
		case WM_NCLBUTTONDBLCLK       : return "NCLBUTTONDBLCLK";
		case WM_NCRBUTTONDOWN         : return "NCRBUTTONDOWN";
		case WM_NCRBUTTONUP           : return "NCRBUTTONUP";
		case WM_NCRBUTTONDBLCLK       : return "NCRBUTTONDBLCLK";
		case WM_NCMBUTTONDOWN         : return "NCMBUTTONDOWN";
		case WM_NCMBUTTONUP           : return "NCMBUTTONUP";
		case WM_NCMBUTTONDBLCLK       : return "NCMBUTTONDBLCLK";
		case WM_NCXBUTTONDOWN         : return "NCXBUTTONDOWN";
		case WM_NCXBUTTONUP           : return "NCXBUTTONUP";
		case WM_NCXBUTTONDBLCLK       : return "NCXBUTTONDBLCLK";
		case WM_KEYDOWN               : return "KEYDOWN";
		case WM_KEYFIRST              : return "KEYFIRST";
		case WM_KEYUP                 : return "KEYUP";
		case WM_CHAR                  : return "CHAR";
		case WM_DEADCHAR              : return "DEADCHAR";
		case WM_SYSKEYDOWN            : return "SYSKEYDOWN";
		case WM_SYSKEYUP              : return "SYSKEYUP";
		case WM_SYSCHAR               : return "SYSCHAR";
		case WM_SYSDEADCHAR           : return "SYSDEADCHAR";
		case WM_KEYLAST               : return "KEYLAST";
		case WM_INITDIALOG            : return "INITDIALOG";
		case WM_COMMAND               : return "COMMAND";
		case WM_SYSCOMMAND            : return "SYSCOMMAND";
		case WM_TIMER                 : return "TIMER";
		case WM_HSCROLL               : return "HSCROLL";
		case WM_VSCROLL               : return "VSCROLL";
		case WM_INITMENU              : return "INITMENU";
		case WM_INITMENUPOPUP         : return "INITMENUPOPUP";
		case WM_MENUSELECT            : return "MENUSELECT";
		case WM_MENUCHAR              : return "MENUCHAR";
		case WM_ENTERIDLE             : return "ENTERIDLE";
		case WM_MENURBUTTONUP         : return "MENURBUTTONUP";
		case WM_MENUDRAG              : return "MENUDRAG";
		case WM_MENUGETOBJECT         : return "MENUGETOBJECT";
		case WM_UNINITMENUPOPUP       : return "UNINITMENUPOPUP";
		case WM_MENUCOMMAND           : return "MENUCOMMAND";
		case WM_CTLCOLORMSGBOX        : return "CTLCOLORMSGBOX";
		case WM_CTLCOLOREDIT          : return "CTLCOLOREDIT";
		case WM_CTLCOLORLISTBOX       : return "CTLCOLORLISTBOX";
		case WM_CTLCOLORBTN           : return "CTLCOLORBTN";
		case WM_CTLCOLORDLG           : return "CTLCOLORDLG";
		case WM_CTLCOLORSCROLLBAR     : return "CTLCOLORSCROLLBAR";
		case WM_CTLCOLORSTATIC        : return "CTLCOLORSTATIC";
		case WM_MOUSEMOVE             : return "MOUSEMOVE";
		case WM_MOUSEFIRST            : return "MOUSEFIRST";
		case WM_LBUTTONDOWN           : return "LBUTTONDOWN";
		case WM_LBUTTONUP             : return "LBUTTONUP";
		case WM_LBUTTONDBLCLK         : return "LBUTTONDBLCLK";
		case WM_RBUTTONDOWN           : return "RBUTTONDOWN";
		case WM_RBUTTONUP             : return "RBUTTONUP";
		case WM_RBUTTONDBLCLK         : return "RBUTTONDBLCLK";
		case WM_MBUTTONDOWN           : return "MBUTTONDOWN";
		case WM_MBUTTONUP             : return "MBUTTONUP";
		case WM_MBUTTONDBLCLK         : return "MBUTTONDBLCLK";
		case WM_MOUSEWHEEL            : return "MOUSEWHEEL";
		case WM_MOUSELAST             : return "MOUSELAST";
		case WM_XBUTTONDOWN           : return "XBUTTONDOWN";
		case WM_XBUTTONUP             : return "XBUTTONUP";
		case WM_XBUTTONDBLCLK         : return "XBUTTONDBLCLK";
		case WM_MOUSELAST             : return "MOUSELAST";
		case WM_PARENTNOTIFY          : return "PARENTNOTIFY";
		case WM_ENTERMENULOOP         : return "ENTERMENULOOP";
		case WM_EXITMENULOOP          : return "EXITMENULOOP";
		case WM_NEXTMENU              : return "NEXTMENU";
		case WM_NEXTMENU              : return "NEXTMENU";
		case WM_SIZING                : return "SIZING";
		case WM_CAPTURECHANGED        : return "CAPTURECHANGED";
		case WM_MOVING                : return "MOVING";
		case WM_POWERBROADCAST        : return "POWERBROADCAST";
		case WM_DEVICECHANGE          : return "DEVICECHANGE";
		case WM_MDICREATE             : return "MDICREATE";
		case WM_MDIDESTROY            : return "MDIDESTROY";
		case WM_MDIACTIVATE           : return "MDIACTIVATE";
		case WM_MDIRESTORE            : return "MDIRESTORE";
		case WM_MDINEXT               : return "MDINEXT";
		case WM_MDIMAXIMIZE           : return "MDIMAXIMIZE";
		case WM_MDITILE               : return "MDITILE";
		case WM_MDICASCADE            : return "MDICASCADE";
		case WM_MDIICONARRANGE        : return "MDIICONARRANGE";
		case WM_MDIGETACTIVE          : return "MDIGETACTIVE";
		case WM_MDISETMENU            : return "MDISETMENU";
		case WM_ENTERSIZEMOVE         : return "ENTERSIZEMOVE";
		case WM_EXITSIZEMOVE          : return "EXITSIZEMOVE";
		case WM_DROPFILES             : return "DROPFILES";
		case WM_MDIREFRESHMENU        : return "MDIREFRESHMENU";
		case WM_NCMOUSEHOVER          : return "NCMOUSEHOVER";
		case WM_MOUSEHOVER            : return "MOUSEHOVER";
		case WM_NCMOUSELEAVE          : return "NCMOUSELEAVE";
		case WM_MOUSELEAVE            : return "MOUSELEAVE";
		case WM_CUT                   : return "CUT";
		case WM_COPY                  : return "COPY";
		case WM_PASTE                 : return "PASTE";
		case WM_CLEAR                 : return "CLEAR";
		case WM_UNDO                  : return "UNDO";
		case WM_RENDERFORMAT          : return "RENDERFORMAT";
		case WM_RENDERALLFORMATS      : return "RENDERALLFORMATS";
		case WM_DESTROYCLIPBOARD      : return "DESTROYCLIPBOARD";
		case WM_DRAWCLIPBOARD         : return "DRAWCLIPBOARD";
		case WM_PAINTCLIPBOARD        : return "PAINTCLIPBOARD";
		case WM_VSCROLLCLIPBOARD      : return "VSCROLLCLIPBOARD";
		case WM_SIZECLIPBOARD         : return "SIZECLIPBOARD";
		case WM_ASKCBFORMATNAME       : return "ASKCBFORMATNAME";
		case WM_CHANGECBCHAIN         : return "CHANGECBCHAIN";
		case WM_HSCROLLCLIPBOARD      : return "HSCROLLCLIPBOARD";
		case WM_QUERYNEWPALETTE       : return "QUERYNEWPALETTE";
		case WM_PALETTEISCHANGING     : return "PALETTEISCHANGING";
		case WM_PALETTECHANGED        : return "PALETTECHANGED";
		case WM_HOTKEY                : return "HOTKEY";
		case WM_PRINT                 : return "PRINT";
		case WM_PRINTCLIENT           : return "PRINTCLIENT";
		case WM_THEMECHANGED          : return "THEMECHANGED";
		case WM_HANDHELDFIRST         : return "HANDHELDFIRST";
		case WM_HANDHELDLAST          : return "HANDHELDLAST";
		case WM_AFXFIRST              : return "AFXFIRST";
		case WM_AFXLAST               : return "AFXLAST";
		case WM_PENWINFIRST           : return "PENWINFIRST";
		case WM_PENWINLAST            : return "PENWINLAST";
		case WM_USER                  : return "USER";
		case WM_APP                   : return "APP";
	}
	return string.Format("0x%%X", value);
}

const int EM_GETSEL              = 0xB0;
const int EM_SETSEL              = 0xB1;
const int EM_GETRECT             = 0xB2;
const int EM_SETRECT             = 0xB3;
const int EM_SETRECTNP           = 0xB4;
const int EM_SCROLL              = 0xB5;
const int EM_LINESCROLL          = 0xB6;
const int EM_SCROLLCARET         = 0xB7;
const int EM_GETMODIFY           = 0xB8;
const int EM_SETMODIFY           = 0xB9;
const int EM_GETLINECOUNT        = 0xBA;
const int EM_LINEINDEX           = 0xBB;
const int EM_SETHANDLE           = 0xBC;
const int EM_GETHANDLE           = 0xBD;
const int EM_GETTHUMB            = 0xBE;
const int EM_LINELENGTH          = 0xC1;
const int EM_REPLACESEL          = 0xC2;
const int EM_GETLINE             = 0xC4;
const int EM_LIMITTEXT           = 0xC5;
const int EM_SETLIMITTEXT        = 0xC5;
const int EM_CANUNDO             = 0xC6;
const int EM_UNDO                = 0xC7;
const int EM_FMTLINES            = 0xC8;
const int EM_LINEFROMCHAR        = 0xC9;
const int EM_SETTABSTOPS         = 0xCB;
const int EM_SETPASSWORDCHAR     = 0xCC;
const int EM_EMPTYUNDOBUFFER     = 0xCD;
const int EM_GETFIRSTVISIBLELINE = 0xCE;
const int EM_SETREADONLY         = 0xCF;
const int EM_SETWORDBREAKPROC    = 0xD0;
const int EM_GETWORDBREAKPROC    = 0xD1;
const int EM_GETPASSWORDCHAR     = 0xD2;
const int EM_SETMARGINS          = 0xD3;
const int EM_GETMARGINS          = 0xD4;
const int EM_GETLIMITTEXT        = 0xD5;
const int EM_POSFROMCHAR         = 0xD6;
const int EM_CHARFROMPOS         = 0xD7;

const int EN_SETFOCUS     = 0x100;
const int EN_KILLFOCUS    = 0x200;
const int EN_CHANGE       = 0x300;
const int EN_UPDATE       = 0x400;
const int EN_ERRSPACE     = 0x500;
const int EN_MAXTEXT      = 0x501;
const int EN_HSCROLL      = 0x601;
const int EN_VSCROLL      = 0x602;
const int EN_ALIGN_LTR_EC = 0x700;
const int EN_ALIGN_RTL_EC = 0x701;

const int ES_LEFT        =    0x0;
const int ES_CENTER      =    0x1;
const int ES_RIGHT       =    0x2;
const int ES_MULTILINE   =    0x4;
const int ES_UPPERCASE   =    0x8;
const int ES_LOWERCASE   =   0x10;
const int ES_PASSWORD    =   0x20;
const int ES_AUTOVSCROLL =   0x40;
const int ES_AUTOHSCROLL =   0x80;
const int ES_NOHIDESEL   =  0x100;
const int ES_OEMCONVERT  =  0x400;
const int ES_READONLY    =  0x800;
const int ES_WANTRETURN  = 0x1000;
const int ES_NUMBER      = 0x2000;

const int BM_GETCHECK     = 0xF0;
const int BM_SETCHECK     = 0xF1;
const int BM_GETSTATE     = 0xF2;
const int BM_SETSTATE     = 0xF3;
const int BM_SETSTYLE     = 0xF4;
const int BM_CLICK        = 0xF5;
const int BM_GETIMAGE     = 0xF6;
const int BM_SETIMAGE     = 0xF7;
const int BM_SETDONTCLICK = 0xF8;

const int BN_CLICKED       = 0;
const int BN_PAINT         = 1;
const int BN_HILITE        = 2;
const int BN_PUSHED        = 2;
const int BN_UNHILITE      = 3;
const int BN_UNPUSHED      = 3;
const int BN_DISABLE       = 4;
const int BN_DOUBLECLICKED = 5;
const int BN_DBLCLK        = 5;
const int BN_SETFOCUS      = 6;
const int BN_KILLFOCUS     = 7;

const int BS_PUSHBUTTON      =    0x0;
const int BS_TEXT            =    0x0;
const int BS_DEFPUSHBUTTON   =    0x1;
const int BS_CHECKBOX        =    0x2;
const int BS_AUTOCHECKBOX    =    0x3;
const int BS_RADIOBUTTON     =    0x4;
const int BS_3STATE          =    0x5;
const int BS_AUTO3STATE      =    0x6;
const int BS_GROUPBOX        =    0x7;
const int BS_USERBUTTON      =    0x8;
const int BS_AUTORADIOBUTTON =    0x9;
const int BS_PUSHBOX         =    0xA;
const int BS_OWNERDRAW       =    0xB;
const int BS_TYPEMASK        =    0xF;
const int BS_LEFTTEXT        =   0x20;
const int BS_RIGHTBUTTON     =   0x20;
const int BS_ICON            =   0x40;
const int BS_BITMAP          =   0x80;
const int BS_LEFT            =  0x100;
const int BS_RIGHT           =  0x200;
const int BS_CENTER          =  0x300;
const int BS_TOP             =  0x400;
const int BS_BOTTOM          =  0x800;
const int BS_VCENTER         =  0xC00;
const int BS_PUSHLIKE        = 0x1000;
const int BS_MULTILINE       = 0x2000;
const int BS_NOTIFY          = 0x4000;
const int BS_FLAT            = 0x8000;

const int BST_UNCHECKED     = 0;
const int BST_CHECKED       = 1;
const int BST_INDETERMINATE = 2;
const int BST_PUSHED        = 4;
const int BST_FOCUS         = 8;

const int SS_LEFT            =    0x0;
const int SS_CENTER          =    0x1;
const int SS_RIGHT           =    0x2;
const int SS_ICON            =    0x3;
const int SS_BLACKRECT       =    0x4;
const int SS_GRAYRECT        =    0x5;
const int SS_WHITERECT       =    0x6;
const int SS_BLACKFRAME      =    0x7;
const int SS_GRAYFRAME       =    0x8;
const int SS_WHITEFRAME      =    0x9;
const int SS_USERITEM        =    0xA;
const int SS_SIMPLE          =    0xB;
const int SS_LEFTNOWORDWRAP  =    0xC;
const int SS_OWNERDRAW       =    0xD;
const int SS_BITMAP          =    0xE;
const int SS_ENHMETAFILE     =    0xF;
const int SS_ETCHEDHORZ      =   0x10;
const int SS_ETCHEDVERT      =   0x11;
const int SS_ETCHEDFRAME     =   0x12;
const int SS_TYPEMASK        =   0x1F;
const int SS_REALSIZECONTROL =   0x40;
const int SS_NOPREFIX        =   0x80;
const int SS_NOTIFY          =  0x100;
const int SS_CENTERIMAGE     =  0x200;
const int SS_RIGHTJUST       =  0x400;
const int SS_REALSIZEIMAGE   =  0x800;
const int SS_SUNKEN          = 0x1000;
const int SS_EDITCONTROL     = 0x2000;
const int SS_ENDELLIPSIS     = 0x4000;
const int SS_PATHELLIPSIS    = 0x8000;
const int SS_WORDELLIPSIS    = 0xC000;
const int SS_ELLIPSISMASK    = 0xC000;

const int LB_OKAY     =  0;
const int LB_ERR      = -1;
const int LB_ERRSPACE = -2;

const int LB_ADDSTRING           = 0x180;
const int LB_INSERTSTRING        = 0x181;
const int LB_DELETESTRING        = 0x182;
const int LB_SELITEMRANGEEX      = 0x183;
const int LB_RESETCONTENT        = 0x184;
const int LB_SETSEL              = 0x185;
const int LB_SETCURSEL           = 0x186;
const int LB_GETSEL              = 0x187;
const int LB_GETCURSEL           = 0x188;
const int LB_GETTEXT             = 0x189;
const int LB_GETTEXTLEN          = 0x18A;
const int LB_GETCOUNT            = 0x18B;
const int LB_SELECTSTRING        = 0x18C;
const int LB_DIR                 = 0x18D;
const int LB_GETTOPINDEX         = 0x18E;
const int LB_FINDSTRING          = 0x18F;
const int LB_GETSELCOUNT         = 0x190;
const int LB_GETSELITEMS         = 0x191;
const int LB_SETTABSTOPS         = 0x192;
const int LB_GETHORIZONTALEXTENT = 0x193;
const int LB_SETHORIZONTALEXTENT = 0x194;
const int LB_SETCOLUMNWIDTH      = 0x195;
const int LB_ADDFILE             = 0x196;
const int LB_SETTOPINDEX         = 0x197;
const int LB_GETITEMRECT         = 0x198;
const int LB_GETITEMDATA         = 0x199;
const int LB_SETITEMDATA         = 0x19A;
const int LB_SELITEMRANGE        = 0x19B;
const int LB_SETANCHORINDEX      = 0x19C;
const int LB_GETANCHORINDEX      = 0x19D;
const int LB_SETCARETINDEX       = 0x19E;
const int LB_GETCARETINDEX       = 0x19F;
const int LB_SETITEMHEIGHT       = 0x1A0;
const int LB_GETITEMHEIGHT       = 0x1A1;
const int LB_FINDSTRINGEXACT     = 0x1A2;
const int LB_SETLOCALE           = 0x1A5;
const int LB_GETLOCALE           = 0x1A6;
const int LB_SETCOUNT            = 0x1A7;
const int LB_INITSTORAGE         = 0x1A8;
const int LB_ITEMFROMPOINT       = 0x1A9;
const int LB_MULTIPLEADDSTRING   = 0x1B1;
const int LB_GETLISTBOXINFO      = 0x1B2;
const int LB_MSGMAX              = 0x1B3;

const int LBN_ERRSPACE  = -2;
const int LBN_SELCHANGE =  1;
const int LBN_DBLCLK    =  2;
const int LBN_SELCANCEL =  3;
const int LBN_SETFOCUS  =  4;
const int LBN_KILLFOCUS =  5;

const int LBS_NOTIFY            =    0x1;
const int LBS_SORT              =    0x2;
const int LBS_NOREDRAW          =    0x4;
const int LBS_MULTIPLESEL       =    0x8;
const int LBS_OWNERDRAWFIXED    =   0x10;
const int LBS_OWNERDRAWVARIABLE =   0x20;
const int LBS_HASSTRINGS        =   0x40;
const int LBS_USETABSTOPS       =   0x80;
const int LBS_NOINTEGRALHEIGHT  =  0x100;
const int LBS_MULTICOLUMN       =  0x200;
const int LBS_WANTKEYBOARDINPUT =  0x400;
const int LBS_EXTENDEDSEL       =  0x800;
const int LBS_DISABLENOSCROLL   = 0x1000;
const int LBS_NODATA            = 0x2000;
const int LBS_NOSEL             = 0x4000;
const int LBS_COMBOBOX          = 0x8000;

const int LBS_STANDARD = LBS_NOTIFY|LBS_SORT|WS_VSCROLL|WS_BORDER;

const int CB_GETEDITSEL            =  0x140;
const int CB_LIMITTEXT             =  0x141;
const int CB_SETEDITSEL            =  0x142;
const int CB_ADDSTRING             =  0x143;
const int CB_DELETESTRING          =  0x144;
const int CB_DIR                   =  0x145;
const int CB_GETCOUNT              =  0x146;
const int CB_GETCURSEL             =  0x147;
const int CB_GETLBTEXT             =  0x148;
const int CB_GETLBTEXTLEN          =  0x149;
const int CB_INSERTSTRING          =  0x14A;
const int CB_RESETCONTENT          =  0x14B;
const int CB_FINDSTRING            =  0x14C;
const int CB_SELECTSTRING          =  0x14D;
const int CB_SETCURSEL             =  0x14E;
const int CB_SHOWDROPDOWN          =  0x14F;
const int CB_GETITEMDATA           =  0x150;
const int CB_SETITEMDATA           =  0x151;
const int CB_GETDROPPEDCONTROLRECT =  0x152;
const int CB_SETITEMHEIGHT         =  0x153;
const int CB_GETITEMHEIGHT         =  0x154;
const int CB_SETEXTENDEDUI         =  0x155;
const int CB_GETEXTENDEDUI         =  0x156;
const int CB_GETDROPPEDSTATE       =  0x157;
const int CB_FINDSTRINGEXACT       =  0x158;
const int CB_SETLOCALE             =  0x159;
const int CB_GETLOCALE             =  0x15A;
const int CB_GETTOPINDEX           =  0x15B;
const int CB_SETTOPINDEX           =  0x15C;
const int CB_GETHORIZONTALEXTENT   =  0x15D;
const int CB_SETHORIZONTALEXTENT   =  0x15E;
const int CB_GETDROPPEDWIDTH       =  0x15F;
const int CB_SETDROPPEDWIDTH       =  0x160;
const int CB_INITSTORAGE           =  0x161;
const int CB_SETMINVISIBLE         = 0x1701;
const int CB_GETMINVISIBLE         = 0x1702;

const int CBN_ERRSPACE     = -1;
const int CBN_SELCHANGE    =  1;
const int CBN_DBLCLK       =  2;
const int CBN_SETFOCUS     =  3;
const int CBN_KILLFOCUS    =  4;
const int CBN_EDITCHANGE   =  5;
const int CBN_EDITUPDATE   =  6;
const int CBN_DROPDOWN     =  7;
const int CBN_CLOSEUP      =  8;
const int CBN_SELENDOK     =  9;
const int CBN_SELENDCANCEL = 10;

const int CBS_SIMPLE            =    0x1;
const int CBS_DROPDOWN          =    0x2;
const int CBS_DROPDOWNLIST      =    0x3;
const int CBS_OWNERDRAWFIXED    =   0x10;
const int CBS_OWNERDRAWVARIABLE =   0x20;
const int CBS_AUTOHSCROLL       =   0x40;
const int CBS_OEMCONVERT        =   0x80;
const int CBS_SORT              =  0x100;
const int CBS_HASSTRINGS        =  0x200;
const int CBS_NOINTEGRALHEIGHT  =  0x400;
const int CBS_DISABLENOSCROLL   =  0x800;
const int CBS_UPPERCASE         = 0x2000;
const int CBS_LOWERCASE         = 0x4000;

struct WNDCLASSEX
{
	int cbSize        = sizeof WNDCLASSEX;
	int style         =                 0;
	var lpfnWndProc   =              null;
	int cbClsExtra    =                 0;
	int cbWndExtra    =                 0;
	var hInstance     =              null;
	var hIcon         =              null;
	var hCursor       =              null;
	var hbrBackground =              null;
	var lpszMenuName  =      (string)null;
	var lpszClassName =      (string)null;
	var hIconSm       =              null;

	function Show
	{
		printfln("cbSize       : %08x", cbSize);
		printfln("style        : %08x", style);
		printfln("lpfnWndProc  : %08x", lpfnWndProc);
		printfln("cbClsExtra   : %08x", cbClsExtra);
		printfln("cbWndExtra   : %08x", cbWndExtra);
		printfln("hInstance    : %08x", hInstance);
		printfln("hIcon        : %08x", hIcon);
		printfln("hCursor      : %08x", hCursor);
		printfln("hbrBackground: %08x", hbrBackground);
		printfln("lpszMenuName : %08x", lpszMenuName);
		printfln("lpszClassName: %08x", lpszClassName);
		printfln("hIconSm      : %08x", hIconSm);
	}
}

struct POINT
{
	int x;
	int y;

	function Show
	{
		printfln("x: %08x", x);
		printfln("y: %08x", y);
	}
}

struct RECT
{
	int left;
	int top;
	int right;
	int bottom;

	function Show
	{
		printfln("left  : %08x", left);
		printfln("top   : %08x", top);
		printfln("right : %08x", right);
		printfln("bottom: %08x", bottom);
	}
}

struct MSG
{
	var   hwnd;
	var   message;
	var   wParam;
	var   lParam;
	var   time;
	POINT pt;

	function Show
	{
		printfln("hwnd   : %08x", hwnd);
		printfln("message: %08x", message);
		printfln("wParam : %08x", wParam);
		printfln("lParam : %08x", lParam);
		printfln("time   : %08x", time);
	}
}

struct PAINTSTRUCT
{
	var  hdc;
	int  fErase;
	RECT rcPaint;
	int  fRestore;
	int  fIncUpdate;
	byte rgbReserved[32];

	function Show
	{
		printfln("hdc            : %08x", hdc);
		printfln("fErase         : %08x", fErase);
		printfln("fRestore       : %08x", fRestore);
		printfln("fIncUpdate     : %08x", fIncUpdate);
	}
}

struct BITMAPINFO
{
	BITMAPINFOHEADER bmiHeader;
	RGBQUAD          bmiColors[1];

	function Show
	{
	}
}

struct BITMAPINFOHEADER
{
	int   biSize          = sizeof BITMAPINFOHEADER;
	int   biWidth;
	int   biHeight;
	short biPlanes;
	short biBitCount;
	int   biCompression;
	int   biSizeImage;
	int   biXPelsPerMeter;
	int   biYPelsPerMeter;
	int   biClrUsed;
	int   biClrImportant;

	function Show
	{
		printfln("biSize         : %08x", biSize);
		printfln("biWidth        : %08x", biWidth);
		printfln("biHeight       : %08x", biHeight);
		printfln("biPlanes       : %04x", biPlanes);
		printfln("biBitCount     : %04x", biBitCount);
		printfln("biCompression  : %08x", biCompression);
		printfln("biSizeImage    : %08x", biSizeImage);
		printfln("biXPelsPerMeter: %08x", biXPelsPerMeter);
		printfln("biYPelsPerMeter: %08x", biYPelsPerMeter);
		printfln("biClrUsed      : %08x", biClrUsed);
		printfln("biClrImportant : %08x", biClrImportant);
	}
}

struct RGBQUAD
{
	byte rgbBlue;
	byte rgbGreen;
	byte rgbRed;
	byte rgbReserved;

	function Show
	{
		printfln("rgbBlue    : %02x", rgbBlue);
		printfln("rgbGreen   : %02x", rgbGreen);
		printfln("rgbRed     : %02x", rgbRed);
		printfln("rgbReserved: %02x", rgbReserved);
	}
}

struct MENUITEMINFO
{
	int cbSize;
	int fMask;
	int fType;
	int fState;
	int wID;
	var hSubMenu;
	var hbmpChecked;
	var hbmpUnchecked;
	int dwItemData;
	int dwTypeData;
	int cch;
	var hbmpItem;

	function Show
	{
		printfln("cbSize       : %08x", cbSize);
		printfln("fMask        : %08x", fMask);
		printfln("fType        : %08x", fType);
		printfln("fState       : %08x", fState);
		printfln("wID          : %08x", wID);
		printfln("hSubMenu     : %08x", hSubMenu);
		printfln("hbmpChecked  : %08x", hbmpChecked);
		printfln("hbmpUnchecked: %08x", hbmpUnchecked);
		printfln("dwItemData   : %08x", dwItemData);
		printfln("dwTypeData   : %08x", dwTypeData);
		printfln("cch          : %08x", cch);
		printfln("hbmpItem     : %08x", hbmpItem);
	}
}

struct LOGFONT
{
	int  lfHeight;
	int  lfWidth;
	int  lfEscapement;
	int  lfOrientation;
	int  lfWeight;
	byte lfItalic;
	byte lfUnderline;
	byte lfStrikeOut;
	byte lfCharSet;
	byte lfOutPrecision;
	byte lfClipPrecision;
	byte lfQuality;
	byte lfPitchAndFamily;
	char lfFaceName[LF_FACESIZE];

	function Show
	{
		printfln("lfHeight               : %08x", lfHeight);
		printfln("lfWidth                : %08x", lfWidth);
		printfln("lfEscapement           : %08x", lfEscapement);
		printfln("lfOrientation          : %08x", lfOrientation);
		printfln("lfWeight               : %08x", lfWeight);
		printfln("lfItalic               : %02x", lfItalic);
		printfln("lfUnderline            : %02x", lfUnderline);
		printfln("lfStrikeOut            : %02x", lfStrikeOut);
		printfln("lfCharSet              : %02x", lfCharSet);
		printfln("lfOutPrecision         : %02x", lfOutPrecision);
		printfln("lfClipPrecision        : %02x", lfClipPrecision);
		printfln("lfQuality              : %02x", lfQuality);
		printfln("lfPitchAndFamily       : %02x", lfPitchAndFamily);
	}
}

struct OPENFILENAME
{
	int    lStructSize       = sizeof OPENFILENAME;
	var    hwndOwner         =                null;
	var    hInstance;
	var    lpstrFilter       =        (string)null;
	var    lpstrCustomFilter =         (char*)null;
	int    nMaxCustFilter;
	int    nFilterIndex;
	var    lpstrFile         =         (char*)null;
	int    nMaxFile;
	var    lpstrFileTitle    =         (char*)null;
	int    nMaxFileTitle;
	var    lpstrInitialDir   =        (string)null;
	var    lpstrTitle        =        (string)null;
	int    Flags;
	ushort nFileOffset;
	ushort nFileExtension;
	var    lpstrDefExt       =        (string)null;
	int    lCustData;
	var    lpfnHook;
	var    lpTemplateName    =        (string)null;
	var    pvReserved;
	int    dwReserved;
	int    FlagsEx;

	function Show
	{
		printfln("lStructSize      : %08x", lStructSize);
		printfln("hwndOwner        : %08x", hwndOwner);
		printfln("hInstance        : %08x", hInstance);
		printfln("lpstrFilter      : %08x", lpstrFilter);
		printfln("lpstrCustomFilter: %08x", lpstrCustomFilter);
		printfln("nMaxCustFilter   : %08x", nMaxCustFilter);
		printfln("nFilterIndex     : %08x", nFilterIndex);
		printfln("lpstrFile        : %08x", lpstrFile);
		printfln("nMaxFile         : %08x", nMaxFile);
		printfln("lpstrFileTitle   : %08x", lpstrFileTitle);
		printfln("nMaxFileTitle    : %08x", nMaxFileTitle);
		printfln("lpstrInitialDir  : %08x", lpstrInitialDir);
		printfln("lpstrTitle       : %08x", lpstrTitle);
		printfln("Flags            : %08x", Flags);
		printfln("nFileOffset      : %04x", nFileOffset);
		printfln("nFileExtension   : %04x", nFileExtension);
		printfln("lpstrDefExt      : %08x", lpstrDefExt);
		printfln("lCustData        : %08x", lCustData);
		printfln("lpfnHook         : %08x", lpfnHook);
		printfln("lpTemplateName   : %08x", lpTemplateName);
		printfln("pvReserved       : %08x", pvReserved);
		printfln("dwReserved       : %08x", dwReserved);
		printfln("FlagsEx          : %08x", FlagsEx);
	}
}

struct NONCLIENTMETRICS
{
	int     cbSize           = sizeof NONCLIENTMETRICS;
	int     iBorderWidth;
	int     iScrollWidth;
	int     iScrollHeight;
	int     iCaptionWidth;
	int     iCaptionHeight;
	LOGFONT lfCaptionFont;
	int     iSmCaptionWidth;
	int     iSmCaptionHeight;
	LOGFONT lfSmCaptionFont;
	int     iMenuWidth;
	int     iMenuHeight;
	LOGFONT lfMenuFont;
	LOGFONT lfStatusFont;
	LOGFONT lfMessageFont;

	function Show
	{
		printfln("cbSize          : %08x", cbSize);
		printfln("iBorderWidth    : %08x", iBorderWidth);
		printfln("iScrollWidth    : %08x", iScrollWidth);
		printfln("iScrollHeight   : %08x", iScrollHeight);
		printfln("iCaptionWidth   : %08x", iCaptionWidth);
		printfln("iCaptionHeight  : %08x", iCaptionHeight);
		printfln("iSmCaptionWidth : %08x", iSmCaptionWidth);
		printfln("iSmCaptionHeight: %08x", iSmCaptionHeight);
		printfln("iMenuWidth      : %08x", iMenuWidth);
		printfln("iMenuHeight     : %08x", iMenuHeight);
	}
}

struct TEXTMETRIC
{
	int  tmHeight;
	int  tmAscent;
	int  tmDescent;
	int  tmInternalLeading;
	int  tmExternalLeading;
	int  tmAveCharWidth;
	int  tmMaxCharWidth;
	int  tmWeight;
	int  tmOverhang;
	int  tmDigitizedAspectX;
	int  tmDigitizedAspectY;
	char tmFirstChar;
	char tmLastChar;
	char tmDefaultChar;
	char tmBreakChar;
	byte tmItalic;
	byte tmUnderlined;
	byte tmStruckOut;
	byte tmPitchAndFamily;
	byte tmCharSet;

	function Show
	{
		printfln("tmHeight          : %08x", tmHeight);
		printfln("tmAscent          : %08x", tmAscent);
		printfln("tmDescent         : %08x", tmDescent);
		printfln("tmInternalLeading : %08x", tmInternalLeading);
		printfln("tmExternalLeading : %08x", tmExternalLeading);
		printfln("tmAveCharWidth    : %08x", tmAveCharWidth);
		printfln("tmMaxCharWidth    : %08x", tmMaxCharWidth);
		printfln("tmWeight          : %08x", tmWeight);
		printfln("tmOverhang        : %08x", tmOverhang);
		printfln("tmDigitizedAspectX: %08x", tmDigitizedAspectX);
		printfln("tmDigitizedAspectY: %08x", tmDigitizedAspectY);
		printfln("tmFirstChar       : '%c'", tmFirstChar);
		printfln("tmLastChar        : '%c'", tmLastChar);
		printfln("tmDefaultChar     : '%c'", tmDefaultChar);
		printfln("tmBreakChar       : '%c'", tmBreakChar);
		printfln("tmItalic          : %02x", tmItalic);
		printfln("tmUnderlined      : %02x", tmUnderlined);
		printfln("tmStruckOut       : %02x", tmStruckOut);
		printfln("tmPitchAndFamily  : %02x", tmPitchAndFamily);
		printfln("tmCharSet         : %02x", tmCharSet);
	}
}

extern "kernel32.dll"
{
	__stdcall __widecharset GetModuleHandle(lpModuleName);
	__stdcall GetTickCount();
	__stdcall MulDiv(nNumber, nNumerator, nDenominator);
	__stdcall Sleep(dwMilliseconds);
}

extern "user32.dll"
{
	__stdcall AdjustWindowRectEx(lpRect, dwStyle, bMenu, dwExStyle);
	__stdcall BeginPaint(hWnd, lpPaint);
	__stdcall __widecharset CallWindowProc(lpPrevWndFunc, hWnd, uMsg, wParam, lParam);
	__stdcall CloseWindow(hWnd);
	__stdcall CreateMenu();
	__stdcall CreatePopupMenu();
	__stdcall __widecharset CreateWindowEx(dwExStyle, lpClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam);
	__stdcall __widecharset DefWindowProc(hWnd, Msg, wParam, lParam);
	__stdcall DestroyMenu(hMenu);
	__stdcall DestroyWindow(hWnd);
	__stdcall __widecharset DispatchMessage(lpmsg);
	__stdcall EndPaint(hWnd, lpPaint);
	__stdcall FillRect(hDC, lprc, hbr);
	__stdcall GetCapture();
	__stdcall __widecharset GetClassLong(hWnd, nIndex);
	__stdcall GetClientRect(hWnd, lpRect : RECT);
	__stdcall GetDC(hWnd);
	__stdcall GetDesktopWindow();
	__stdcall __widecharset GetMessage(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax);
	__stdcall GetSysColorBrush(nIndex);
	__stdcall __widecharset GetWindowLong(hWnd, nIndex);
	__stdcall GetWindowRect(hWnd, lpRect : RECT);
	__stdcall __widecharset GetWindowText(hWnd, lpString, nMaxCount);
	__stdcall __widecharset GetWindowTextLength(hWnd);
	__stdcall __widecharset InsertMenuItem(hMenu, uItem, fByPosition, lpmii);
	__stdcall InvalidateRect(hWnd, lpRect, bErase);
	__stdcall __widecharset LoadCursor(hInstance, lpCursorName);
	__stdcall __widecharset MessageBox(hWnd, lpText, lpCation, uType);
	__stdcall __widecharset PeekMessage(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg);
	__stdcall PostQuitMessage(nExitCode);
	__stdcall RedrawWindow(hWnd, lprcUpdate : RECT, hrgnUpdate, flags);
	__stdcall __widecharset RegisterClassEx(lpwcx);
	__stdcall ReleaseCapture();
	__stdcall ReleaseDC(hWnd, hDC);
	__stdcall __widecharset SendMessage(hWnd, Msg, wParam, lParam);
	__stdcall SetCapture(hWnd);
	__stdcall __widecharset SetClassLong(hWnd, nIndex, dwNewLong);
	__stdcall SetFocus(hWnd);
	__stdcall SetMenu(hWnd, hMenu);
	__stdcall __widecharset SetMenuItemInfo(hMenu, uItem, fByPosition, lpmii);
	__stdcall __widecharset SetWindowLong(hWnd, nIndex, dwNewLong);
	__stdcall SetWindowPos(hWnd, hWndInsertAfter, X, Y, cx, cy, uFlags);
	__stdcall __widecharset SetWindowText(hWnd, lpString);
	__stdcall ShowWindow(hWnd, nCmdShow);
	__stdcall __widecharset SystemParametersInfo(uiAction, uiParam, pvParam, fWinIni);
	__stdcall TranslateMessage(lpMsg);
	__stdcall __widecharset UnregisterClass(lpClassName, hInstance);
	__stdcall UpdateWindow(hWnd);
}

extern "gdi32.dll"
{
	__stdcall CreateCompatibleDC(hdc);
	__stdcall __widecharset CreateFont(nHeight, nWidth, nEscapement, nOrientation, fnWeight, fdwItalic, fdwUnderline, fdwStrikeOut, fdwCharSet, fdwOutputPrecision, fdwClipPrecision, fdwQuality, fdwPitchAndFamily, lpszFace);
	__stdcall __widecharset CreateFontIndirect(lplf : LOGFONT);
	__stdcall CreateSolidBrush(crColor);
	__stdcall DeleteDC(hdc);
	__stdcall DeleteObject(hObject);
	__stdcall GetDeviceCaps(hdc, nIndex);
	__stdcall __widecharset GetTextMetrics(hdc, lptm : TEXTMETRIC);
	__stdcall SelectObject(hdc, hgdiobj);
	__stdcall SetBkMode(hdc, iBkMode);
	__stdcall SetDIBitsToDevice(hdc, XDest, YDest, dwWidth, dwHeight, XSrc, YSrc, uStartScan, cScanLines, lpvBits, lpbmi, fuColorUse);
	__stdcall SetTextColor(hdc, crColor);
	__stdcall __widecharset TextOut(hdc, nXStart, nYStart, lpString, cbString);
}

extern "comdlg32.dll"
{
	__stdcall __widecharset GetOpenFileName(lpofn);
	__stdcall __widecharset GetSaveFileName(lpofn);
}
