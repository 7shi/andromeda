printfln("Library Test");
_Finish _finish;

const string test_dir = "exe-Test";
var test_xml = Path.Combine(test_dir, "Test.xml");

// --------------------------------

println();
printfln("*** UTF-8 Test ***");

var surrogate = new char[4];
surrogate[0] = 0xd800;
surrogate[1] = 0xdc00;
surrogate[2] = 0xdbff;
surrogate[3] = 0xdfff;
for (int i = 0; i < surrogate.Length; i++)
	printfln("surrogate[%d]: %04x", i, surrogate[i]);

var utf8 = UTF8Encoder.GetBytes(surrogate);
for (int i = 0; i < utf8.Length; i++)
	printfln("utf8[%d]: %02x", i, utf8[i]);

var utf16 = UTF8Decoder.GetString(utf8);
for (int i = 0; i < utf16.Length; i++)
	printfln("utf16[%d]: %04x", i, utf16[i]);

// --------------------------------

println();
printfln("*** Dictionary Test ***");

var dict = new StringDictionary;
dict.Add("cat", "猫");
dict.Add("dog", "犬");
dict.Add("cow", "牛");
dict.Add("horse", "馬");

var keys = dict.Keys;
for (int i = 0; i < keys.Length; i++)
{
	var key = keys[i];
	printfln("%s: %s", key, dict.Get(key));
}

// --------------------------------

println();
printfln("*** StringBuilder Test ***");

var sb = new StringBuilder;
sb.AppendLine("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>");
sb.AppendLine("<root>");
sb.AppendLine("<node>こんにちは、世界！</node>");
sb.AppendLine("<node expr=\"1 + 1\" value=\"%d\" />", 1 + 1);
sb.AppendLine("</root>");
var xml = sb.ToString();
print(xml);

// --------------------------------

println();
printfln("*** File I/O Test ***");

var sw = new StreamWriter;
if (sw.Open(test_xml))
{
	var sr1 = new StringReader;
	sr1.Open(xml);
	var line : string;
	while ((line = sr1.ReadLine()) != null)
		sw.WriteLine(line);
	sw.Close();
}

var sr2 = new StreamReader;
if (sr2.Open(test_xml))
{
	printfln("sr2.IsUTF8 = %d", sr2.IsUTF8);
	printfln("sr2.Stream.Length = %d", sr2.Stream.Length);
	
	int ln = 1;
	var line : string;
	while ((line = sr2.ReadLine()) != null)
		printfln("%d: %s", ln++, line);
	sr2.Close();
}

// --------------------------------

println();
printfln("*** XML Test ***");

var xp = new XMLParser;
if (xp.Open(test_xml))
{
	while (xp.Read())
	{
		var d = xp.Data.Trim();
		if (d != "") printfln("Data = %s", d);
		printfln("Name = %s", xp.Name);
		if (xp.Attributes.Count > 0)
		{
			var keys = xp.Attributes.Keys;
			for (int i = 0; i < keys.Length; i++)
			{
				var key = keys[i];
				var v = xp.Attributes.Get(key);
				printfln("  %s = \"%s\"", key, v);
			}
		}
	}
	xp.Close();
}

// --------------------------------

println();
printfln("*** Excel XML Test ***");

var xx = new ExcelXML;
if (xx.Open(Path.Combine(test_dir, "Book1.xml")))
{
	var line : string[];
	while ((line = xx.ReadLine()) != null)
	{
		for (int i = 0; i < line.Length; i++)
		{
			if (i > 0) print("\t");
			var data = line[i];
			if (data != null) print(data);
		}
		println();
	}
	xx.Close();
}

// --------------------------------

println();
printfln("*** String Test ***");

var s1 = "  aBaCaBa  ";
printfln("s1                   : \"%s\"", s1);
printfln("s1.ToLower()         : \"%s\"", s1.ToLower());
printfln("s1.ToUpper()         : \"%s\"", s1.ToUpper());
printfln("s1.TrimStart()       : \"%s\"", s1.TrimStart());
printfln("s1.TrimEnd()         : \"%s\"", s1.TrimEnd());
printfln("s1.Trim()            : \"%s\"", s1.Trim());
printfln("s1.Remove(5, 3)      : \"%s\"", s1.Remove(5, 3));
printfln("s1.RemoveFrom(7)     : \"%s\"", s1.RemoveFrom(7));
printfln("s1.IndexOf(\"Ba\")     : %d", s1.IndexOf("Ba"));
printfln("s1.LastIndexOf(\"Ba\") : %d", s1.LastIndexOf("Ba"));
printfln("s1.Count(\"aB\")       : %d", s1.Count("aB"));
printfln("s1.Replace(\"aB\", \"!\"): \"%s\"", s1.Replace("aB", "!"));
printfln("s1.Insert(4, \"--\")   : \"%s\"", s1.Insert(4, "--"));
printfln("s1.Overwrite(4, \"--\"): \"%s\"", s1.Overwrite(4, "--"));
printfln("s1.Swap(3, 4, \"--\")  : \"%s\"", s1.Swap(3, 4, "--"));
printfln("s1.Left(5)           : \"%s\"", s1.Left(5));
printfln("s1.Right(5)          : \"%s\"", s1.Right(5));
printfln("\"abc\".PadLeft(8)     : \"%s\"", "abc".PadLeft(8));
printfln("\"abc\".PadRight(8)    : \"%s\"", "abc".PadRight(8));

var s2 = "1 + 1 " + '=' + ' ' + (1 + 1);
printfln("s2: %s", s2);

var s3 = "1 + 1 ";
s3 += '=';
s3 += ' ';
s3 += 1 + 1;
printfln("s3: %s", s3);

printfln("\"abc\" * 3       : \"%s\"", "abc" * 3);
printfln("\"abc\" * 3 - 2   : \"%s\"", "abc" * 3 - 2);
printfln("\"abc\" * 3 - 'b' : \"%s\"", "abc" * 3 - 'b');
printfln("\"abc\" * 3 - \"bc\": \"%s\"", "abc" * 3 - "bc");

var s4 = "abc|def|ghi";
printfln("\"%s\".Split(\"|\")", s4);
var s4split = s4.Split("|");
for (int i = 0; i < s4split.Length; i++)
	printfln("[%d]: \"%s\"", i, s4split[i]);
