class I386
{
    static function Call(op1 : Reg32) : OpCode
    {
        switch (op1)
        {
        case Reg32.EAX:
            return OpCode.NewBytes(Util.GetBytes2(0xff, 0xd0));
        }
        raise("The method or operation is not implemented.");
    }

    static function CallA(op1 : Addr32) : OpCode
    {
        return OpCode.NewA(Util.GetBytes1(0xff), Addr32.NewAdM(op1, 2));
    }

    static function CallD(op1 : Val32) : OpCode
    {
        return OpCode.NewDRel(Util.GetBytes1(0xe8), op1, true);
    }

    static function CallArgs(call : CallType, func : Addr32, args : object[])
    {
        var list = new ArrayList();
        for (int i = args.Length - 1; i >= 0; i--)
        {
            var arg = args[i];
            if (arg is int )
                list.Add(PushD(Val32.NewI((int)arg)));
            else if (arg is uint)
                list.Add(PushD(Val32.New((uint)arg)));
            else if (arg is Val32)
                list.Add(PushD((Val32)arg));
            else if (arg is Addr32)
                list.Add(PushA((Addr32)arg));
            else
                raise("Unknown argument.");
        }
        list.Add(CallA(func));
        if (call == CallType.CDecl)
        {
            list.Add(AddR(Reg32.ESP, Val32.New((byte)(args.Length * 4))));
        }
        var ret = new OpCode[list.Count];
        for (int i = 0; i < ret.Length; i++)
            ret[i] = list.Get(i) as OpCode;
        return ret;
    }
}
