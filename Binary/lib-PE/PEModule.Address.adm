class PEModule
{
	function VirtualToRaw(vad)
	{
		var sects = sections.Values;
		for (int i = 0; i < sects.Length; i++)
		{
			var sect = ((CSectionHeader)sects[i]).Header;
			var ad = sect.VirtualToRaw(vad);
			if (ad != 0) return ad;
		}
		return 0;
	}
	
	function RawToVirtual(ad)
	{
		var sects = sections.Values;
		for (int i = 0; i < sects.Length; i++)
		{
			var sect = ((CSectionHeader)sects[i]).Header;
			var vad = sect.RawToVirtual(ad);
			if (vad != 0) return vad;
		}
		return 0;
	}
	
	function GetSectionVirtual(vad)
	{
		var sects = sections.Values;
		for (int i = 0; i < sects.Length; i++)
		{
			var csect = (CSectionHeader)sects[i];
			if (csect.Header.ContainsVirtual(vad)) return csect;
		}
		return null;
	}
	
	function GetSectionRaw(ad)
	{
		var sects = sections.Values;
		for (int i = 0; i < sects.Length; i++)
		{
			var csect = (CSectionHeader)sects[i];
			if (csect.Header.ContainsRaw(ad)) return csect;
		}
		return null;
	}
	
	function GetDataVirtual(vad)
	{
		var csect = GetSectionVirtual(vad);
		if (csect == null) return null;
		
		var offset = vad - csect.Header.VirtualAddress;
		return addrof csect.Data[offset];
	}
	
	function GetDataRaw(ad)
	{
		var csect = GetSectionRaw(ad);
		if (csect == null) return null;
		
		var offset = ad - csect.Header.PointerToRawData;
		return addrof csect.Data[offset];
	}
}
