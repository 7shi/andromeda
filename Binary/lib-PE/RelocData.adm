class RelocData
{
	var blocks = new ArrayList;
	
	function Add(block : Block)
	{
		blocks.Add(block);
	}
	
	function GetLength
	{
		int ret = 0;
		for (int i = 0; i < blocks.Count; i++)
		{
			var b : Block = blocks.Get(i);
			int page = -1;
			var relocs = b.GetRelocs();
			for (int j = 0; j < relocs.Length; j++)
			{
				var ad = relocs[j];
				var p = ad >> 12;
				if (page != p)
				{
					if ((ret & 3) != 0) ret += 2;
					ret += sizeof FixupHeader;
					page = p;
				}
				ret += 2;
			}
			if ((ret & 3) != 0) ret += 2;
		}
		return ret;
	}
	
	function Create(m : PEModule)
	{
		var ms = new MemoryStream;
		for (int i = 0; i < blocks.Count; i++)
		{
			var b : Block = blocks.Get(i);
			var ms2 = new MemoryStream;
			int page = 0;
			var relocs = b.GetRelocs();
			for (int j = 0; j < relocs.Length; j++)
			{
				var ad = b.Address + relocs[j];
				var p = ad >> 12;
				if (page != p)
				{
					output();
					page = p;
				}
				ms2.WriteShort(ad & 0xfff | 0x3000);
			}
			output();
			
			function output
			{
				if (page == 0) return;
				ms.WriteInt((page << 12) - m.WinNT.ImageBase);
				ms.WriteInt(8 + Align(ms2.Length, 4));
				ms.WriteWithLength(ms2.buffer, ms2.Length);
				if ((ms2.Length & 3) != 0) ms.WriteShort(0);
				ms2.Clear();
			}
		}
		
		m.Dir.BaseRelocationTable_Size = ms.Length;
		if (ms.Length == 0)
		{
			m.Dir.BaseRelocationTable_Address = 0;
			return null;
		}
		
		var reloc = m.GetSection(".reloc").Header;
		m.Dir.BaseRelocationTable_Address = reloc.VirtualAddress;
		return ms.ToArray();
	}
}
