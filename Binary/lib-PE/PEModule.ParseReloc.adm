const int IMAGE_REL_BASED_ABSOLUTE     = 0;
const int IMAGE_REL_BASED_HIGH         = 1;
const int IMAGE_REL_BASED_LOW          = 2;
const int IMAGE_REL_BASED_HIGHLOW      = 3;
const int IMAGE_REL_BASED_HIGHADJ      = 4;
const int IMAGE_REL_BASED_MIPS_JMPADDR = 5;

class PEModule
{
	function ParseReloc
	{
		var vad = Dir.BaseRelocationTable_Address;
		if (vad == 0) return;
		
		var csect = GetSectionVirtual(vad);
		if (csect == null)
		{
			println();
			printfln("RelocationTable が見付かりません。");
			return;
		}
		
		var last = vad + Dir.BaseRelocationTable_Size;
		while (vad < last)
		{
			var fh : FixupHeader* = csect.GetDataVirtual(vad);
			println();
			printfln("%p(V:%p): [FixupHeader]", VirtualToRaw(vad), vad);
			fh.Show();
			var bend = vad + fh.BlockSize;
			vad += sizeof(FixupHeader);
			for (; vad < bend; vad += 2)
			{
				var fixup = ((ushort*)csect.GetDataVirtual(vad))[0];
				var type = fixup >> 12;
				var offset = fixup & 0xfff;
				if (type == 0)
					printfln("(%d) %p", type, offset);
				else
				{
					var fvad = fh.Page + offset;
					var target = ((var*)GetDataVirtual(fvad))[0];
					printfln("(%d) %p => %p(V:%p): %p",
						type, offset, VirtualToRaw(fvad), fvad, target);
				}
			}
		}
	}
}
