class Hashtable
{
	var keys = new StringList();
	var values = new ArrayList();
	
	var hnums = new VarList[256];
	var hkeys = new StringList[256];
	var hvals = new ArrayList[256];
	
	static function GetHash(key : string) : int
	{
		if (key == null || key.Length == 0)
			return 0;
		else if (key.Length == 1)
		{
			int ch = key[0];
			return ((ch >> 8) ^ ch) & 255;
		}
		else
		{
			int chs = key[0];
			int che = key[key.Length - 1];
			int hs = ((chs >> 12) ^ (chs >> 8) ^ (chs >> 4) ^ chs) & 15;
			int he = ((che >> 12) ^ (che >> 8) ^ (che >> 4) ^ che) & 15;
			return hs ^ (he << 4) ^ (key.Length & 255);
		}
	}
	
	function get_Count { return keys.Count; }
	function get_Keys { return keys.ToArray(); }
	function get_Values { return values.ToArray(); }
	
	function Clear
	{
		keys.Clear();
		values.Clear();
		hnums = new VarList[256];
		hkeys = new StringList[256];
		hvals = new ArrayList[256];
	}
	
	function Add(key : string, v : object)
	{
		var hash = GetHash(key);
		var listn = hnums[hash];
		var listk = hkeys[hash];
		var listv = hvals[hash];
		if (listn != null)
		{
			for (int i = 0; i < listk.Count; i++)
			{
				if (listk.Get(i) == key)
				{
					listv.Set(i, v);
					values.Set(listn.Get(i), v);
					return;
				}
			}
		}
		if (listn == null)
		{
			hnums[hash] = listn = new VarList;
			hkeys[hash] = listk = new StringList;
			hvals[hash] = listv = new ArrayList;
		}
		listn.Add(keys.Count);
		listk.Add(key);
		listv.Add(v);
		keys.Add(key);
		values.Add(v);
	}
	
	function Remove(key : string) : object
	{
		var hash = GetHash(key);
		var listn = hnums[hash];
		if (listn == null) return null;
		var listk = hkeys[hash];
		var listv = hvals[hash];
		for (int i = 0; i < listk.Count; i++)
		{
			if (listk.Get(i) == key)
			{
				int num = listn.RemoveAt(i);
				listk.RemoveAt(i);
				listv.RemoveAt(i);
				keys.RemoveAt(num);
				return values.RemoveAt(num);
			}
		}
		return null;
	}
	
	function Get(key : string) : object
	{
		var hash = GetHash(key);
		var listk = hkeys[hash];
		if (listk == null) return null;
		var listv = hvals[hash];
		for (int i = 0; i < listk.Count; i++)
		{
			if (listk.Get(i) == key) return listv.Get(i);
		}
		return null;
	}
	
	function ContainsKey(key : string) : bool
	{
		var hash = GetHash(key);
		var listk = hkeys[hash];
		if (listk == null) return null;
		var listv = hvals[hash];
		for (int i = 0; i < listk.Count; i++)
		{
			if (listk.Get(i) == key) return true;
		}
		return false;
	}
	
	function ContainsValue(v : object) : bool
	{
		for (int i = 0; i < values.Count; i++)
		{
			if (values.Get(i) == v) return true;
		}
		return false;
	}
}
