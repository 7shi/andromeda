class StreamReader : TextReader
{
	var Stream : FileStream;
	bool IsUTF8 = false;
	
	override Close()
	{
		if (Stream != null)
		{
			Stream.Close();
			Stream = null;
		}
	}
	
	function Open(file : string)
	{
		Close();
		var fs = new FileStream;
		if (!fs.OpenRead(file)) return false;
		
		var bom = UTF8.BOM;
		IsUTF8 = true;
		for (int i = 0; i < bom.Length; i++)
		{
			byte b = fs.ReadByte();
			if (b != bom[i])
			{
				fs.Position = 0;
				IsUTF8 = false;
				break;
			}
		}
		Stream = fs;
		return true;
	}
	
	function GetString(buf : byte[])
	{
		if (IsUTF8)
			return UTF8.GetString(buf);
		return wstr(buf);
	}
	
	override ReadToEnd : string
	{
		if (Stream == null) return null;
		return GetString(Stream.ReadToEnd());
	}
	
	int surrogate = -1;
	
	override ReadChar : int
	{
		if (Stream == null) return -1;
		if (surrogate != -1)
		{
			int ret = surrogate;
			surrogate = -1;
			return ret;
		}
		if (IsUTF8) return ReadUtf8Char();
		
		var ms = new MemoryStream(), b;
		while ((b = Stream.ReadByte()) != -1)
		{
			ms.WriteByte(b);
			var s = wstr(ms.ToArray());
			if (s.Length > 1)
			{
				if (s.Length == 2 && 0xd800 <= s[0] && s[0] < 0xdc00)
				{
					surrogate = s[1];
					return s[0];
				}
				Position = Position - 1;
				return s[0];
			}
		}
		if (ms.Length == 0) return -1;
		var ws = wstr(ms.ToArray());
		return ws[0];
	}
	
	function ReadUtf8Char() : var
	{
		var pos = Position;
		var b1 = Stream.ReadByte();
		if (b1 == -1)
			return -1;
		else if (b1 < 0x80)
			return b1;
		else if (b1 < 0xc2)
		{
		}
		else if (b1 < 0xe0)
		{
			var b2 = Stream.ReadByte();
			if (b2 == -1) return '?';
			if ((b2 & 0xc0) == 0x80)
				return ((b1 & 0x1f) << 6) + (b2 & 0x3f);
			Position = pos + 1;
		}
		else if (b1 < 0xf0)
		{
			var b2 = Stream.ReadByte();
			if (b2 == -1) return '?';
			var b3 = Stream.ReadByte();
			if (b3 != -1
				&& (b2 & 0xc0) == 0x80
				&& (b3 & 0xc0) == 0x80)
			{
				char c = ((b1 & 0xf) << 12)
					+ ((b2 & 0x3f) << 6)
					+  (b3 & 0x3f);
				if (0x800 <= c && !(0xd800 <= c && c < 0xe000))
					return c;
			}
			Position = pos + 1;
		}
		else if (b1 < 0xf8)
		{
			var b2 = Stream.ReadByte();
			if (b2 == -1) return '?';
			var b3 = Stream.ReadByte();
			if (b3 != -1)
			{
				var b4 = Stream.ReadByte();
				if (b4 != -1
					&& (b2 & 0xc0) == 0x80
					&& (b3 & 0xc0) == 0x80
					&& (b4 & 0xc0) == 0x80)
				{
					int ch = ((b1 & 7) << 18)
						+ ((b2 & 0x3f) << 12)
						+ ((b3 & 0x3f) <<  6)
						+  (b4 & 0x3f);
					if (ch >= 0x10000)
					{
						ch -= 0x10000;
						surrogate = 0xdc00 + (ch & 0x3ff);
						return 0xd800 + (ch >> 10);
					}
				}
			}
			Position = pos + 1;
		}
		return '?';
	}
	
	override get_Position
	{
		return Stream.Position;
	}
	
	override set_Position(pos)
	{
		Stream.Position = pos;
	}
}
