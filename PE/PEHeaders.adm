class CSectionHeader
{
	SectionHeader Header;
	var Data : byte[];
	
	function GetDataVirtual(vad)
	{
		if (!Header.ContainsVirtual(vad)) return null;
		return addrof Data[vad - Header.VirtualAddress];
	}
}

struct SectionHeader
{
	function get_Name
	{
		var buf = new byte[9];
		__movsb(buf, name, 8);
		return wstr(buf);
	}
	
	function set_Name(s : string)
	{
		for (int i = 0; i < 8; i++)
		{
			if (i < s.Length)
				name[i] = s[i];
			else
				name[i] = 0;
		}
	}
	
	function ContainsRaw(ad)
	{
		return PointerToRawData <= ad
			&& ad < PointerToRawData + SizeOfRawData;
	}
	
	function ContainsVirtual(vad)
	{
		return VirtualAddress <= vad
			&& vad < VirtualAddress + VirtualSize;
	}
	
	function RawToVirtual(ad)
	{
		if (!ContainsRaw(ad)) return 0;
		return ad - PointerToRawData + VirtualAddress;
	}
	
	function VirtualToRaw(vad)
	{
		if (!ContainsVirtual(vad)) return 0;
		return vad - VirtualAddress + PointerToRawData;
	}
}

struct PEHeaderDataDirectories
{
	function IsInExportTable(vad)
	{
		return ExportTable_Address <= vad
			&& vad < ExportTable_Address + ExportTable_Size;
	}
	
	function IsInImportTable(vad)
	{
		return ImportTable_Address <= vad
			&& vad < ImportTable_Address + ImportTable_Size;
	}
	
	function IsInRelocationTable(vad)
	{
		return BaseRelocationTable_Address <= vad
			&& vad < BaseRelocationTable_Address + BaseRelocationTable_Size;
	}
	
	function IsInIAT(vad)
	{
		return IAT_Address <= vad && vad < IAT_Address + IAT_Size;
	}
}
