class PEModule
{
	function ParseExport
	{
		var vad = Dir.ExportTable_Address;
		if (vad == 0) return;
		
		println();
		var csect = GetSectionVirtual(vad);
		if (csect == null)
		{
			printfln("ExportTable が見付かりません。");
			return;
		}
		
		var offset = vad - csect.Header.VirtualAddress;
		var etbl : ExportTable = addrof csect.Data[offset];
		printfln("%p(V:%p): [ExportTable]", VirtualToRaw(vad), vad);
		etbl.Show();
		var name = wstr(GetDataVirtual(etbl.Name));
		printfln("Name => %s", name);
		var ad : var* = csect.GetDataVirtual(etbl.ExportAddressTable);
		if (ad == null)
		{
			printfln("ExportAddressTable が無効です。");
			return;
		}
		var ot : ushort* = csect.GetDataVirtual(etbl.OrdinalTable);
		if (ot == null)
		{
			printfln("OrdinalTable が無効です。");
			return;
		}
		var np : var* = csect.GetDataVirtual(etbl.NamePointer);
		if (np == null)
		{
			printfln("NamePointer が無効です。");
			return;
		}
		printfln("ExportAddressTable, OrdinalTable, NamePointer =>");
		for (int i = 0; i < etbl.NumberOfNamePointers; i++)
		{
			var ord = ot[i];
			var ead = 0;
			if (ord < etbl.AddressTableEntries) ead = ad[ord];
			ord += etbl.OrdinalBase;
			var ename = wstr(csect.GetDataVirtual(np[i]));
			if (Dir.IsInExportTable(ead))
				printfln("%s <= (%d) %s", wstr(csect.GetDataVirtual(ead)), ord, ename);
			else
				printfln("%p(V:%p): (%d) %s", VirtualToRaw(ead), ead, ord, ename);
		}
	}
}
