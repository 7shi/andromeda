class TypeArray : TypeBase
{
    override get_Name { return _Type.Name + "[" + Count + "]"; }
    override get_Size { return _Type.Size * Count; }
    override get_IsArray { return true; }
    override get_IsValue { return false; }

    override Cast(type : TypeBase) : TypeBase
    {
        if (type is TypeVar)
            return type;
        if (!(type is TypePointer))
            return null;
        return base.override_Cast(type);
    }

    override get_NeedsCtor { return _Type.NeedsCtor; }

    override AddConstructor(codes : OpModule)
    {
        var count = Count;
        if (count == 0)
            return;
        var loop = new OpCode();
        codes.Add(I386.PushD(Val32.NewI(count)));
        codes.Add(I386.PushA(Addr32.NewRO(Reg32.ESP, 4)));
        codes.Add(loop);
        _Type.AddConstructor(codes);
        codes.Add(I386.AddA(Addr32.New(Reg32.ESP), Val32.NewI(_Type.Size)));
        codes.Add(I386.DecA(Addr32.NewRO(Reg32.ESP, 4)));
        codes.Add(I386.Jcc(Cc.NZ, loop.Address));
        codes.Add(I386.AddR(Reg32.ESP, Val32.NewI(8)));
    }

    override get_NeedsDtor { return _Type.NeedsDtor; }

    override AddDestructor(codes : OpModule)
    {
        var count = Count;
        if (count == 0)
            return;
        var loop = new OpCode();
        codes.Add(I386.PushD(Val32.NewI(count)));
        codes.Add(I386.PushA(Addr32.NewRO(Reg32.ESP, 4)));
        codes.Add(I386.AddA(Addr32.New(Reg32.ESP), Val32.NewI(Size)));
        codes.Add(loop);
        codes.Add(I386.SubA(Addr32.New(Reg32.ESP), Val32.NewI(_Type.Size)));
        _Type.AddDestructor(codes);
        codes.Add(I386.DecA(Addr32.NewRO(Reg32.ESP, 4)));
        codes.Add(I386.Jcc(Cc.NZ, loop.Address));
        codes.Add(I386.AddR(Reg32.ESP, Val32.NewI(8)));
    }

    var count : NodeBase;
    function get_Count : int
    {
        var v = IntValue.GetValue(count);
        if (v == null)
        {
            var nb = count as NodeBase;
            if (nb != null)
                raise(nb.Abort("配列のサイズが定数ではありません。"));
            else
                raise("配列のサイズが定数ではありません。");
        }
        return v.Value;
    }

    static function New(type : TypeBase, count : NodeBase) : TypeArray
    {
        var ret = new TypeArray();
        ret._Type = type;
        ret.count = count;
        return ret;
    }

    static function NewInt(type : TypeBase, count : int) : TypeArray
    {
        return New(type, IntValue.New(count));
    }
}
