class TypeReference : TypeVarBase
{
    const string Delete = "__operator_delete";
    const string Reference = "__reference";
    const string Dereference = "__dereference";

    function get_Name : string
    {
        if (IsArray)
            return get_Type().Name + "[]";
        else
            return "var:" + get_Type().Name;
    }

    override CheckFunc(op : string) : bool
    {
        return base.override_CheckFunc(op) || get_Type().CheckFunc(op);
    }

    override AddOpCodes(op : string, codes : OpModule, dest : Addr32)
    {
        if (base.override_CheckFunc(op))
            base.override_AddOpCodes(op, codes, dest);
        else
            get_Type().AddOpCodes(op, codes, dest);
    }

    override GetCond(op : string) : CondPair
    {
        var ret = base.override_GetCond(op);
        if (ret == null)
            ret = get_Type().GetCond(op);
        return ret;
    }

    override Cast(type : TypeBase) : TypeBase
    {
        if (IsArray && type.Name == "var:object")
            return type;
        else if (type is TypeVar)
            return type;
        else if (type is TypeString && IsArray && get_Type() is TypeChar)
            return type;
        else if (type is TypePointer && IsArray)
        {
            if (get_Type() is TypeIntBase)
            {
                if (get_Type() == type.get_Type())
                    return type;
            }
            else if (get_Type().Cast(type.get_Type()) != null)
                return type;
        }
        if (!(type is TypeReference))
            return null;
        else if (get_Type() is TypeReference && type.get_Type() is TypeReference)
        {
            var c = get_Type().Cast(type.get_Type());
            if (c == null)
                return null;
            return Types.ToVarType(c);
        }
        else
            return base.override_Cast(type);
    }

    override AddSetCodes(codes : OpModule, ad : Addr32)
    {
        if (UseGC)
        {
            var flag = !ad.IsAddress && ad.Register == Var.DestRegister;
            if (flag)
                codes.Add(I386.Push(ad.Register));
            codes.Add(I386.Push(Reg32.EAX));
            codes.Add(I386.MovRA(Reg32.EAX, ad));
            AddDereferenceCodes(codes);
            codes.Add(I386.MovRA(Reg32.EAX, Addr32.New(Reg32.ESP)));
            AddReferenceCodes(codes);
            codes.Add(I386.Pop(Reg32.EAX));
            if (flag)
                codes.Add(I386.Pop(ad.Register));
        }
        base.override_AddSetCodes(codes, ad);
    }

    bool doneInferType = false;

    override get_Type : TypeBase
    {
        if (doneInferType)
            return base.override_get_Type();
        doneInferType = true;
        if (IsArray)
        {
            var ts = base.override_get_Type() as TypeStruct;
            if (ts != null && ts.IsClass)
                _Type = Types.ToVarType(ts);
        }
        return base.override_get_Type();
    }

    function get_NeedsCtor : bool
    {
        return UseGC;
    }

    override AddConstructor(codes : OpModule)
    {
        if (!NeedsCtor)
            return;
        codes.Add(I386.MovRA(Reg32.EAX, Addr32.New(Reg32.ESP)));
        codes.Add(I386.MovA(Addr32.New(Reg32.EAX), Val32.NewI(0)));
    }

    function get_NeedsDtor : bool
    {
        return UseGC;
    }

    override AddDestructor(codes : OpModule)
    {
        if (!NeedsDtor)
            return;
        codes.Add(I386.MovRA(Reg32.EAX, Addr32.New(Reg32.ESP)));
        codes.Add(I386.MovRA(Reg32.EAX, Addr32.New(Reg32.EAX)));
        AddDereferenceCodes(codes);
    }

    static function AddReferenceCodes(codes : OpModule)
    {
        codes.Add(I386.Push(Reg32.EAX));
        codes.Add(codes.GetCall("var", Reference));
        codes.Add(I386.Pop(Reg32.EAX));
    }

    static function AddDereferenceCodes(codes : OpModule)
    {
        codes.Add(I386.Push(Reg32.EAX));
        codes.Add(codes.GetCall("var", Dereference));
        codes.Add(I386.Pop(Reg32.EAX));
    }

    function get_UseGC : bool
    {
        if (IsArray)
            return true;
        var t = get_Type() as TypeStruct;
        return t != null && t.IsClass;
    }

    bool isArray = false;
    function get_IsArray : bool
    {
        return isArray;
    }

    static function New(type : TypeBase, isArray : bool) : TypeReference
    {
        var ret = new TypeReference();
        ret._Type = type;
        ret.isArray = isArray;
        return ret;
    }
}
