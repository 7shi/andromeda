class TypePointer : TypeVarBase
{
    function get_Name : string
    {
        return "var:" + Type.Name + "*";
    }

    function get_IsArray : bool
    {
        return true;
    }

    override Cast(type : TypeBase) : TypeBase
    {
        if (type is TypeVar)
            return type;
        if (!(type is TypePointer || type is TypeReference))
            return null;
        return base.override_Cast(type);
    }

    static function New(type : TypeBase) : TypePointer
    {
        var ret = new TypePointer();
        ret.Type = type;
        ret.conds.Add("greater", CondPair.New(Cc.A, Cc.NA));
        ret.conds.Add("greater-equal", CondPair.New(Cc.AE, Cc.NAE));
        ret.conds.Add("less", CondPair.New(Cc.B, Cc.NB));
        ret.conds.Add("less-equal", CondPair.New(Cc.BE, Cc.NBE));
        return ret;
    }

    override CheckFunc(op : string) : bool
    {
        switch (op)
        {
        case "inc":
        case "post-inc":
        case "dec":
        case "post-dec":
        case "add":
        case "sub":
            return true;
        default:
            return base.override_CheckFunc(op);
        }
    }

    override AddOpCodes(op : string, codes : OpModule, dest : Addr32)
    {
        switch (op)
        {
        case "inc":
        case "post-inc":
            if (Type.Size == 1)
                codes.Add(I386.IncA(dest));
            else
                codes.Add(I386.AddA(dest, Val32.NewI(Type.Size)));
            break;
        case "dec":
        case "post-dec":
            if (Type.Size == 1)
                codes.Add(I386.DecA(dest));
            else
                codes.Add(I386.SubA(dest, Val32.NewI(Type.Size)));
            break;
        case "add":
            codes.Add(I386.MovR(Reg32.EDX, Val32.NewI(Type.Size)));
            codes.Add(I386.Mul(Reg32.EDX));
            codes.Add(I386.AddAR(dest, Reg32.EAX));
            break;
        case "sub":
            codes.Add(I386.MovR(Reg32.EDX, Val32.NewI(Type.Size)));
            codes.Add(I386.Mul(Reg32.EDX));
            codes.Add(I386.SubAR(dest, Reg32.EAX));
            break;
        default:
            base.override_AddOpCodes(op, codes, dest);
            break;
        }
    }

    override GetCond(key : string) : CondPair
    {
        return base.override_GetCond(key);
    }
}
