class Parser
{
    function ReadDeclare(isStatic : bool)
    {
        /// todo: infer return type
        var ret : VarDeclare[] = null;
        if (CanRead)
        {
            var t = Read();
            if (t == "var")
                ret = DeclareVar(isStatic);
            else if (t == "delegate" && Peek() != "(")
                ret = DelegateDeclare(isStatic);
            else
            {
                if (Tokenizer.IsWord(t) && CanRead)
                {
                    var name = Read();
                    if (Tokenizer.IsWord(name) && CanRead)
                    {
                        switch (Peek())
                        {
                        case ",":
                        case ";":
                        case "=":
                        case "[":
                            Rewind();
                            return TypedDeclare(t, isStatic);
                        }
                    }
                    Rewind();
                }
                Rewind();
            }
        }
        return ret;
    }

    function ConstDeclare()
    {
        if (!CanRead)
            raise(Abort("const: 型が指定されていません。"));
        var t = Read();
        switch (t)
        {
        case "int":
            ConstIntDeclare();
            return;
        case "string":
            ConstStringDeclare();
            return;
        }
        raise(Abort("const: 型が指定されていません。"));
    }

    function ReadDeclareInternal(category : string, delg : DeclDelg)
    {
        if (!CanRead)
            raise(Abort("%s: 名前が必要です。", category));
        var si = SrcInfo;
        var name = Read();
        if (!Tokenizer.IsWord(name))
            raise(Abort("%s: 名前が不適切です: %s", category, name));
        var array : NodeBase = null;
        var br1 = Read();
        if (br1 == "[")
        {
            array = ReadExpression();
            Check(category, "]");
        }
        else
            Rewind();
        delg.Option(this);
        var eq = Read();
        if (eq == "=")
            delg.Decl(this, name, true, si, array);
        else
        {
            if (eq != null)
                Rewind();
            delg.Decl(this, name, false, si, array);
        }
        var sep = Read();
        if (sep != ",")
            Rewind();
        else if (sep != null)
            ReadDeclareInternal(category, delg);
    }

    function ConstIntDeclare()
    {
        ReadDeclareInternal("const int", new ConstIntDelg);
    }

    function ConstStringDeclare()
    {
        ReadDeclareInternal("const string", new ConstStringDelg);
    }

    function DeclareVar(isStatic : bool)
    {
        var delg = new VarDelg;
        delg.isStatic = isStatic;
        ReadDeclareInternal("var",delg);
        return ToVarDeclareArray(delg.list);
    }

    function TypedDeclare(type : string, isStatic : bool)
    {
        var delg = new TypedDelg;
        delg.type = type;
        delg.isStatic = isStatic;
        var list = new ArrayList();
        ReadDeclareInternal(type, delg);
        return ToVarDeclareArray(delg.list);
    }

    function ReadInitializers(st : Declare, type : string)
    {
        Check(type, "{");
        for (; ; )
        {
            if (Peek() == "{")
            {
                var st2 = Declare.NewDecl(st);
                st2.SrcInfo = SrcInfo;
                ReadInitializers(st2, type);
                st.Values.Add(st2);
            }
            else
                st.Values.Add(ReadExpression());
            var t = Read();
            if (t == "}")
                break;
            else if (t != ",")
            {
                raise(Abort("%s: } が必要です。", type));
            }
        }
    }

    function DelegateDeclare(isStatic : bool)
    {
        var delg = new DelegateDelg;
        delg.isStatic = isStatic;
        delg.type = DelgFunc.GetDefaultType(parent);
        ReadDeclareInternal("delegate", delg);
        return ToVarDeclareArray(delg.list);
    }
}

class DeclDelg
{
    virtual Option(p : Parser) {}
    virtual Decl(p : Parser, name : string, eq : bool, si : SrcInfo, array : NodeBase) {}
}

class ConstIntDelg : DeclDelg
{
    override Decl(p : Parser, name : string, eq : bool, si : SrcInfo, array : NodeBase)
    {
        if (array != null)
            raise(p.parent.AbortInfo(si, "const int: 配列は宣言できません。"));
        if (!eq)
            raise(p.Abort("const int: 等号がありません。"));
        p.parent.AddInt(name, p.ReadExpression());
    }
}

class ConstStringDelg : DeclDelg
{
    override Decl(p : Parser, name : string, eq : bool, si : SrcInfo, array : NodeBase)
    {
        if (array != null)
            raise(p.parent.AbortInfo(si, "const string: 配列は宣言できません。"));
        if (!eq)
            raise(p.Abort("const string: 等号がありません。"));
        var v = p.ReadString();
        if (v == null)
            raise(p.Abort("const string: 文字列が必要です。"));
        p.parent.AddString(name, v.Value);
    }
}

class VarDelg : DeclDelg
{
    bool isStatic;
    var type : string;
    var list = new ArrayList();

    override Option(p : Parser)
    {
        type = null;
        var t = p.Read();
        if (t != ":")
        {
            if (t != null) p.Rewind();
            return;
        }
        if (!p.CanRead)
            raise(p.Abort("var: 型が必要です。"));
        type = p.Read();
        if (!Tokenizer.IsWord(type))
        {
            raise(p.Abort("var: 型が必要です。"));
        }
        var ar = p.Read();
        if (ar == "*")
            type += ar;
        else if (ar == "[")
        {
            ar = p.Read();
            if (ar == "]")
                type += "[]";
            else
            {
                if (ar != null) p.Rewind();
                p.Rewind();
            }
        }
        else if (ar != null)
            p.Rewind();
    }

    override Decl(p : Parser, name : string, eq : bool, si : SrcInfo, array : NodeBase)
    {
        var v : VarDeclare;
        var tb = Types.GetType(p.parent, type);
        if (array == null)
        {
            if (tb != null)
                tb = Types.ToVarType(tb);
            var vd = VarDeclare.New(p.parent, name, tb);
            if (eq)
                vd.Value = p.ReadExpression();
            v = vd;
        }
        else
        {
            if (eq)
                raise(p.parent.AbortInfo(si, "var: 配列を初期化できません。"));
            v = VarDeclare.Array(p.parent, name, Types.ToVarType(tb), array);
        }
        v.SrcInfo = si;
        v.IsStatic = isStatic;
        list.Add(v);
    }
}

class TypedDelg : DeclDelg
{
    bool isStatic;
    var type : string;
    var list = new ArrayList();

    override Decl(p : Parser, name : string, eq : bool, si : SrcInfo, array : NodeBase)
    {
        var v : VarDeclare;
        var tb = Types.GetType(p.parent, type);
        if (array == null)
        {
            var vs = Types.GetValueType(type);
            if (vs == null)
            {
                v = Declare.New(p.parent, name, type);
                if (eq) p.ReadInitializers(v as Declare, type);
            }
            else
            {
                var vd = VarDeclare.New(p.parent, name, tb);
                if (eq)
                {
                    var ex = p.ReadExpression();
                    vd.Value = ex;
                }
                v = vd;
            }
        }
        else
        {
            if (eq)
                raise(p.parent.AbortInfo(si, "%s: 配列を初期化できません。", type));
            if (tb == null)
                tb = TypeInt.Instance;
            v = VarDeclare.Array(p.parent, name, tb, array);
        }
        v.SrcInfo = si;
        v.IsStatic = isStatic;
        list.Add(v);
    }
}

class DelegateDelg : DeclDelg
{
    bool isStatic;
    var type : TypeFunction;
    var list = new ArrayList();

    override Decl(p : Parser, name : string, eq : bool, si : SrcInfo, array : NodeBase)
    {
        var v : VarDeclare;
        if (array == null)
        {
            var vd = VarDeclare.New(p.parent, name, type);
            if (eq)
                vd.Value = p.ReadExpression();
            v = vd;
        }
        else
        {
            if (eq)
                raise(p.parent.AbortInfo(si, "var: 配列を初期化できません。"));
            v = VarDeclare.Array(p.parent, name, type, array);
        }
        v.SrcInfo = si;
        v.IsStatic = isStatic;
        list.Add(v);
    }
}

function ToVarDeclareArray(list : ArrayList)
{
    var ret = new VarDeclare[list.Count];
    for (int i = 0; i < ret.Length; i++)
        ret[i] = list.Get(i) as VarDeclare;
    return ret;
}
