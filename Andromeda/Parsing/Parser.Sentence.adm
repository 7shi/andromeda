class Parser
{
    function Sentence()
    {
        return SentenceWith(";");
    }

    function SentenceWith(separator : string)
    {
        /// todo: infer return type
        if (!CanRead) raise(Abort("文がありません。"));

        var si = SrcInfo;
        var t = Read();
        var ret : NodeBase[] = null;
        var nb : NodeBase = null;
        switch (t)
        {
            case "#":
                Directive();
                break;
            case "{":
                Rewind();
                nb = Block.New(parent);
                ReadBlock("block", nb as Block);
                break;
            case "struct":
            case "class":
                StructDefine(t).SrcInfo = si;
                break;
            case "function":
            case "virtual":
            case "override":
                ReadFunction(t, false).SrcInfo = si;
                break;
            case "static":
                if (Read() == "function")
                    ReadFunction(t, true).SrcInfo = si;
                else
                {
                    Rewind();
                    ret = ReadDeclare(true);
                }
                break;
            case "extern":
                ReadExtern();
                return null;
            case "if":
                nb = ReadIf();
                break;
            case "while":
                nb = ReadWhile();
                break;
            case "for":
                nb = ReadFor();
                break;
            case "switch":
                nb = ReadSwitch();
                break;
            case "new":
                nb = Expression.New(parent, ReadNew());
                break;
            default:
                Rewind();
                ret = SentenceOthers(separator);
                break;
        }
        if (nb != null)
        {
            nb.SrcInfo = si;
            ret = new NodeBase[1];
            ret[0] = nb;
        }
        return ret;
    }

    function SentenceOthers(separator : string)
    {
        /// todo: infer return type
        var ret : NodeBase[] = null;
        var list = new ArrayList();
        var s1 = SentenceBody();
        if (s1 != null)
        {
            for (int i = 0; i < s1.Length; i++)
                list.Add(s1[i]);
        }
        var sep = Read();
        if (sep == ",")
        {
            var s2 = Sentence();
            if (s2 != null)
            {
                for (int i = 0; i < s2.Length; i++)
                    list.Add(s2[i]);
            }
        }
        else if (string.IsNullOrEmpty(separator))
            Rewind();
        else if (sep != separator)
        {
            //if (sep != null) Rewind();
            raise(Abort("%s が必要です。", separator));
        }
        if (list.Count > 0)
        {
            ret = new NodeBase[list.Count];
            for (int i = 0; i < ret.Length; i++)
                ret[i] = list.Get(i) as NodeBase;
        }
        return ret;
    }

    function SentenceBody()
    {
        /// todo: infer return type
        if (!CanRead) raise(Abort("文が必要です。"));

        var ret : NodeBase[] = null;
        var t = Read();
        if (t == "const")
            ConstDeclare();
        else
        {
            var si = SrcInfo;
            var nb = CheckReserved(t);
            if (nb != null)
            {
                nb.SrcInfo = si;
                ret = new NodeBase[1];
                ret[0] = nb;
            }
            else
            {
                Rewind();
                if (t == ";") return null;

                ret = ReadDeclare(false);
                if (ret == null)
                    ret = SentenceExpression();
            }
        }
        return ret;
    }

    function SentenceExpression()
    {
        var e = Expression.New(parent, ReadExpression());
        e.SrcInfo = SrcInfo;
        var ret = new NodeBase[1];
        ret[0]=e;
        return ret;
    }

    function CheckReserved(t : string) : NodeBase
    {
        var brk : Break;
        var cnt : Continue;
        switch (t)
        {
        case "do":
            return ReadDo();
        case "return":
            if (CanRead && Peek() != ";")
                return Return.New(parent, ReadExpression());
            else
                return Return.New(parent, null);
        case "break":
            brk = Break.New(parent);
            if (!(brk as Break).CanBreak())
                raise(Abort("break: ここでは使用できません。"));
            return brk;
        case "continue":
            cnt = Continue.New(parent);
            if (!(cnt as Continue).CanContinue())
                raise(Abort("continue: ここでは使用できません。"));
            return cnt;
        }
        return null;
    }

    function StructDefine(type : string) : Define
    {
        if (!CanRead)
            raise(Abort("%s: 名前が必要です。", type));
        var name = Read();
        if (!Tokenizer.IsWord(name))
        {
            raise(Abort("%s: 名前が不適切です: %s", type, name));
        }
        var baseType : string = null;
        var t = Read();
        if (t == ":")
        {
            if (!CanRead)
                raise(Abort("%s: %s: 型が必要です。", type, name));
            baseType = Read();
            if (!Tokenizer.IsWord(baseType))
            {
                raise(Abort("%s: %s: 型が必要です。", type, name));
            }
            if (name == baseType)
                raise(Abort("%s: %s: 継承できません: %s", type, name, baseType));
        }
        else
            Rewind();
        var ret = parent.GetStruct(name);
        var first = ret == null;
        if (first)
            ret = Define.New(parent, name, baseType);
        else if (baseType != null)
        {
            if (ret.BaseType == null)
                ret.BaseType = baseType;
            else if (baseType != ret.BaseType)
                raise(Abort("%s: 基本クラスが異なります: %s != %s", ret.FullName, ret.BaseType, baseType));
        }
        if (type == "class")
        {
            if (!first && !ret.IsClass)
                raise(Abort("%s: %s: 構造体として定義されています。", type, name));
            ret.IsClass = true;
        }
        else if (!first && ret.IsClass)
            raise(Abort("%s: %s: クラスとして定義されています。", type, name));
        ReadBlock(type, ret);
        if (first && !parent.AddStruct(ret))
            raise(Abort("%s: %s: 定義が重複しています。", type, name));
        return ret;
    }

    function Check(type : string, text : string)
    {
        if (string.IsNullOrEmpty(text))
            return;
        var t = Read();
        if (t != text)
        {
            raise(Abort("%s: %s が必要です。", type, text));
        }
    }

    function ReadBlock(type : string, block : BlockBase)
    {
        Check(type, "{");
        var parent = this.parent;
        this.parent = block;
        for (; ; )
        {
            var t = Read();
            if (t == null)
                raise(Abort("%s: %s: } が必要です。", type, block.Name));
            if (t == "}")
                break;
            Rewind();
            var s = Sentence();
            if (s != null)
                block.AddSentences(s);
        }
        this.parent = parent;
    }

    function AutoDelegate(f : Function) : NodeBase
    {
        if (f == null)
            return null;
        var autoArgs = f.GetAutoArgs();
        if (autoArgs == null)
            return f;
        var args = new NodeBase[autoArgs.Length];
        for (int i = 0; i < args.Length; i++)
            args[i] = Var.NewName(parent, autoArgs[i].Name);
        var ret = DelgFunc.New(parent, f.CallType, args, f);
        ret.Auto = true;
        return ret;
    }

    function ReadFunction(type : string, isStatic : bool) : Function
    {
        if (!CanRead)
            raise(Abort("%s: 定義が必要です。", type));
        var refname = new string[1];
        refname[0]=Read();
        var ct = CheckCallType(CallType.CDecl, refname);
        var name = refname[0];
        if (name == "(" || name == ":" || name == "{")
        {
            name = "";
            Rewind();
        }
        else if (!Tokenizer.IsWord(name))
        {
            raise(Abort("%s: 名前が不適切です: %s", type, name));
        }
        var ret = Function.New(this.parent, name, isStatic);
        ret.CallType = ct;
        if (Peek() == "(")
            ReadArgs(type, ret);
        var comma = Read();
        if (comma == ":")
        {
            var ftype = Read();
            if (!Tokenizer.IsWord(ftype))
            {
                raise(Abort("%s: 型が不適切です: %s", type, ftype));
            }
            ret.SetReturnType(Types.GetVarType(this.parent, ftype));
        }
        else
            Rewind();
        ReadBlock(type, ret);
        if (!ret.Parent.AddFunction(ret))
            raise(Abort("%s: %s: 定義が重複しています。", type, ret.Name));
        if (type == "virtual")
            ret.IsVirtual = true;
        else if (type == "override")
            ret.IsOverride = true;
        return ret;
    }

    function ReadExtern()
    {
        if (!CanRead)
            raise(Abort("extern: 名前が必要です。"));
        var module = ReadString();
        if (module == null)
            raise(Abort("extern: モジュール名が必要です。"));
        var reft = new string[1];
        reft[0]=Peek();
        var ct1 = CheckCallType(CallType.CDecl, reft);
        reft[0] = Peek();
        var sfx1 = CheckSuffix(null, reft);
        var br1 = Read();
        var loop = false;
        if (br1 == "{")
            loop = true;
        else
            Rewind();
        var list = new ArrayList();
        for (; ; )
        {
            var si = SrcInfo;
            var refname = new string[1];
            refname[0]=Read();
            var ct2 = CheckCallType(ct1, refname);
            var sfx2 = CheckSuffix(sfx1, refname);
            var name = refname[0];
            if (!Tokenizer.IsWord(name))
            {
                raise(Abort("extern: 名前が不適切です: %s", name));
            }
            var alias : string = null;
            if (sfx2 != null)
                alias = name + sfx2;
            var ex = Extern.New(parent, name, module.Value, alias);
            ex.SrcInfo = si;
            ex.CallType = ct2;
            if (Peek() == "(")
                ReadArgs("extern", ex);
            var comma = Read();
            if (comma == ":")
            {
                var ftype = Read();
                if (!Tokenizer.IsWord(ftype))
                {
                    raise(Abort("extern: 型が不適切です: %s", ftype));
                }
                ex.SetReturnType(Types.GetVarType(this.parent, ftype));
            }
            else
                Rewind();
            if (!parent.AddFunction(ex))
                raise(Abort("extern: %s: 定義が重複しています。", name));
            list.Add(ex);
            if (!loop)
                break;
            Check("extern", ";");
            var br2 = Read();
            if (br2 == "}")
                break;
            Rewind();
        }
        var ret = new Extern[list.Count];
        for (int i = 0; i < ret.Length; i++)
            ret[i] = list.Get(i) as Extern;
        return ret;
    }

    function CheckCallType(ct : CallType, t : string[]) : CallType
    {
        if (t[0]=="__stdcall")
        {
            t[0]=Read();
            return CallType.Std;
        }
        else if (t[0] == "__cdecl")
        {
            t[0] = Read();
            return CallType.CDecl;
        }
        return ct;
    }

    function CheckSuffix(sfx : string, t : string[]) : string
    {
        if (t[0] == "__widecharset")
        {
            t[0] = Read();
            return "W";
        }
        else if (t[0] == "__ansicharset")
        {
            t[0] = Read();
            return "A";
        }
        else if (t[0] == "__nocharset")
        {
            t[0] = Read();
            return null;
        }
        return sfx;
    }

    function ReadArgs(tp : string, f : Function)
    {
        Check(tp, "(");
        var first = true;
        for (; ; )
        {
            var si = SrcInfo;
            var t = Read();
            if (t == null)
                raise(Abort("%s: %s: ) が必要です。", tp, f.Name));
            if (t == ")")
                break;
            if (first)
                Rewind();
            else if (t != ",")
                raise(Abort("%s: %s: ) が必要です。", tp, f.Name));
            first = false;
            var arg = Read();
            if (!Tokenizer.IsWord(arg))
            {
                raise(Abort("%s: %s: 引数の名前が不適切です: {1}", tp, f.Name, arg));
            }
            var type : string = null;
            var colon = Read();
            if (colon == ":")
            {
                if (!CanRead)
                    raise(Abort("%s: %s: %s: 引数に型が必要です。", tp, f.Name, arg));
                type = Read();
                if (type == "params")
                {
                    f.Args.Add(ArgPtr.New(f, arg));
                    continue;
                }
                else if (!Tokenizer.IsWord(type))
                {
                    raise(Abort("%s: %s: %s: 引数の型が不適切です。", tp, f.Name, arg));
                }
                var ar = Read();
                if (ar == "*")
                    type += ar;
                else if (ar == "[")
                {
                    ar = Read();
                    if (ar == "]")
                        type += "[]";
                    else
                    {
                        if (ar != null)
                            Rewind();
                        Rewind();
                    }
                }
                else if (ar != null)
                    Rewind();
            }
            else if (colon != null)
                Rewind();
            var argt = Types.GetVarType(parent, type);
            var farg = Arg.New(f, arg, argt);
            farg.SrcInfo = si;
            f.Args.Add(farg);
        }
    }

    function ReadCond(parent : BlockBase, type : string) : Cond
    {
        return ReadCondWith(parent, type, "(", ")");
    }

    function ReadCondWith(parent : BlockBase, type : string, start : string, end : string) : Cond
    {
        Check(type, start);
        if (Read() == end)
            return null;
        Rewind();
        var p = this.parent;
        this.parent = parent;
        var ret = Cond.New(parent, ReadExpression());
        this.parent = p;
        Check(type, end);
        return ret;
    }

    function ReadSentenceBlock(parent : BlockBase, type : string) : Block
    {
        return ReadSentenceBlockWith(parent, type, null, ";");
    }

    function ReadSentenceBlockWith(parent : BlockBase, type : string, target : BlockBase, separator : string) : Block
    {
        var ret : Block = null;
        var p = this.parent;
        var si = SrcInfo;
        if (Peek() == "{")
        {
            this.parent = parent;
            var s = SentenceWith(separator);
            if (s != null && s.Length == 1)
                ret = s[0] as Block;
        }
        else
        {
            ret = Block.New(parent);
            if (target == null)
                target = ret;
            this.parent = target;
            var s = SentenceWith(separator);
            if (s != null)
                ret.AddSentences(s);
        }
        if (ret == null)
            raise(p.AbortInfo(si, "%s: ブロックが必要です。", type));
        this.parent = p;
        return ret;
    }

    function ReadWhile() : While
    {
        var ret = While.New(parent);
        ret.Cond = ReadCond(ret, "while");
        ret.Block = ReadSentenceBlock(ret, "while");
        return ret;
    }

    function ReadDo() : Do
    {
        var ret = Do.New(parent);
        ret.Block = ReadSentenceBlock(ret, "do");
        var t = Read();
        if (t != "while")
        {
            raise(Abort("do: while がありません。"));
        }
        ret.Cond = ReadCond(ret, "do");
        return ret;
    }

    function ReadIf() : If
    {
        var ret = If.New(parent);
        ReadIfInternal(ret);
        return ret;
    }

    function ReadIfInternal(target : If)
    {
        var cb1 = CondBlock.New(target);
        cb1.Cond = ReadCond(target, "if");
        cb1.Block = ReadSentenceBlock(target, "if");
        target.Blocks.Add(cb1);
        var t1 = Read();
        if (t1 != "else")
        {
            if (t1 != null)
                Rewind();
            return;
        }
        var t2 = Read();
        if (t2 == "if")
        {
            ReadIfInternal(target);
            return;
        }
        Rewind();
        var cb2 = CondBlock.New(target);
        cb2.Block = ReadSentenceBlock(target, "else");
        target.Blocks.Add(cb2);
    }

    function ReadFor() : For
    {
        Check("for", "(");
        var ret = For.New(parent);
        ret.Init = ReadSentenceBlockWith(ret, "for", ret, ";");
        ret.Cond = ReadCondWith(ret, "for", "", ";");
        if (Read() != ")")
        {
            Rewind();
            ret.Loop = ReadSentenceBlockWith(ret, "for", null, "");
            Check("for", ")");
        }
        ret.Block = ReadSentenceBlock(ret, "for");
        return ret;
    }

    function ReadSwitch() : Switch
    {
        Check("switch", "(");
        var si = SrcInfo;
        var expr = ReadExpression() as NodeBase;
        if (expr == null)
            raise(parent.AbortInfo(si, "switch: 値が必要です。"));
        Check("switch", ")");
        Check("switch", "{");
        var ret = Switch.New(parent, expr);
        ReadCase(ret);
        return ret;
    }

    function ReadCase(target : Switch)
    {
        var scb = new CaseBlock();
        var p : BlockBase;
        var s : NodeBase[];
        for (; ; )
        {
            var t = Read();
            switch (t)
            {
            case null:
                raise(Abort("switch: } が必要です。"));
            case "case":
            case "default":
                if (scb.Block != null)
                {
                    target.Blocks.Add(scb);
                    scb = new CaseBlock();
                }
                if (scb.Case == null)
                    scb.Case = Case.New(target);
                if (t == "case")
                {
                    var v = ReadExpression() as NodeBase;
                    if (v == null)
                        raise(Abort("case: 値が必要です。"));
                    Check("case", ":");
                    scb.Case.Values.Add(v);
                }
                else
                    Check("default", ":");
                break;
            case "}":
                if (scb.Block != null)
                    target.Blocks.Add(scb);
                return;
            default:
                Rewind();
                if (scb.Case == null)
                    raise(Abort("switch: 条件が必要です。"));
                if (scb.Block == null)
                    scb.Block = Block.New(target);
                p = parent;
                parent = target;
                s = Sentence();
                if (s != null)
                    scb.Block.AddSentences(s);
                parent = p;
                break;
            }
        }
    }

    function Directive()
    {
        var t = Read();
        if (t == null)
            raise(Abort("ディレクティブが必要です。"));
        switch (t)
        {
        case "pragma":
            Pragma();
            break;
        default:
            raise(Abort("不明なディレクティブです: %s", t));
        }
    }

    function Pragma()
    {
        var t = Read();
        if (t == null)
            raise(Abort("pragma: 指示が必要です。"));
        switch (t)
        {
        case "subsystem":
            PragmaSubsystem();
            break;
        case "output":
            PragmaOutput();
            break;
        default:
            raise(Abort("pragma: 不明な指示です: %s", t));
        }
    }

    function PragmaSubsystem()
    {
        Check("pragma: subsystem", "(");
        var t = Read();
        if (t == null)
            raise(Abort("pragma: subsystem: サブシステム名が必要です。"));
        else if (!parent.Root.SetSubsystem(t))
            raise(Abort("pragma: subsystem: 不明なサブシステム名です: %s", t));
        Check("pragma: subsystem", ")");
    }

    function PragmaOutput()
    {
        Check("pragma: output", "(");
        var output = ReadString();
        if (output == null)
            raise(Abort("pragma: output: 出力名を文字列で指定してください。"));
        parent.Root.Output = output.Value;
        Check("pragma: output", ")");
    }
}
