class Break : BreakBase
{
    static function New(parent : BlockBase) : Break
    {
        var ret = new Break();
        ret.init(parent);
        return ret;
    }

    function CanBreak() : bool
    {
        for (var p = Parent; p != null; p = p.Parent)
        {
            if (p is Function)
                return false;
            if (p.AcceptsBreak)
                return true;
        }
        return false;
    }

    override AddCodes(codes : OpModule)
    {
        var b = Parent;
        var ptrs = UsingPointers;
        for (; ; { ptrs = b.UsingPointers; b = b.Parent; })
        {
            if (b == null || b is Function)
                raise(Abort("invalid break"));
            b.AddDestructors(codes, ptrs);
            if (b.AcceptsBreak)
                break;
            b.AddExitCodes(codes);
        }
        codes.Add(I386.JmpD(b.Destruct));
    }
}
