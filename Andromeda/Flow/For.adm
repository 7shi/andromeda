class For : BlockBase
{
    var Init : Block;
    var Cond : Cond;
    var Loop : Block;
    var Block : Block;

    override get_AcceptsBreak { return true; }
    override get_AcceptsContinue { return true; }
    override get_Continue : Val32 { return Block.Last; }

    static function New(parent : BlockBase) : For
    {
        var ret = new For();
        ret.init(parent);
        return ret;
    }

    override BeforeAddCodes(codes : OpModule)
    {
        base.override_BeforeAddCodes(codes);
        if (Init != null)
            Init.AddCodes(codes);
        if (Loop != null)
            codes.Add(I386.JmpD(Loop.Last));
        else
            codes.Add(I386.JmpD(Block.Last));
    }

    override AddCodes(codes : OpModule)
    {
        sentences.Clear();
        AddSentence(Block);
        if (Loop != null)
            AddSentence(Loop);
        if (Cond == null)
            Cond = Cond.New(this, IntValue.One);
        Cond.First = Block.First;
        AddSentence(Cond);
        base.override_AddCodes(codes);
    }
}
