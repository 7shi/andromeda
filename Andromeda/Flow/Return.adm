class Return : BreakBase
{
    bool IsLast = false;

    var value : NodeBase;
    function get_Value : NodeBase
    {
        return value;
    }
    function set_Value(value : NodeBase)
    {
        this.value = value;
        parent.GetBelongFunction().AddTypeInfo(value);
    }

    static function New(parent : BlockBase, value : NodeBase) : Return
    {
        var ret = new Return();
        ret.init(parent);
        if (value != null)
            ret.Value = value;
        return ret;
    }

    override AddCodes(codes : OpModule)
    {
        var f = parent.GetBelongFunction();
        if (value != null)
        {
            value.AddCodesV(codes, "mov", null);
            var retval = f.GetRetVal(Parent);
            var dest = retval.GetAddress(codes);
            if (!OpModule.NeedsDtor(value))
            {
                codes.Add(I386.MovAR(dest, Reg32.EAX));
                var tr = value.Type as TypeReference;
                if (tr != null && tr.UseGC)
                    TypeReference.AddReferenceCodes(codes);
            }
            else
            {
                codes.Add(I386.Push(Reg32.EAX));
                var rt = f.ReturnType;
                if (rt == null)
                    codes.Add(I386.MovAR(dest, Reg32.EAX));
                else
                {
                    if (rt is TypeReference)
                        codes.Add(I386.MovA(dest, Val32.NewI(0)));
                    rt.AddSetCodes(codes, dest);
                }
                codes.AddDtorCodes(value.Type);
            }
        }
        var b = Parent;
        var ptrs = UsingPointers;
        for (; ; { ptrs = b.UsingPointers; b = b.Parent; })
        {
            b.AddDestructors(codes, ptrs);
            if (b == f) break;
            b.AddExitCodes(codes);
        }
        if (!IsLast)
            codes.Add(I386.JmpD(b.Destruct));
    }
}
