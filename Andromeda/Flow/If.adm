class CondBlock : NodeBase
{
    var Cond : Cond;
    var Block : Block;
    var Next : CondBlock;

    var first : OpCode = new OpCode();
    function get_First : Val32
    {
        return first.Address;
    }

    static function New(parent : If) : CondBlock
    {
        var ret = new CondBlock();
        ret.Parent = parent;
        return ret;
    }

    override AddCodes(codes : OpModule)
    {
        var next = new OpCode();
        codes.Add(first);
        if (Cond != null)
        {
            Cond.Next = next.Address;
            Cond.AddCodes(codes);
        }
        Block.AddCodes(codes);
        if (Next != null)
            codes.Add(I386.JmpD(Parent.Destruct));
        codes.Add(next);
    }
}

class If : BlockBase
{
    var blocks : ArrayList = new ArrayList();

    function get_Blocks : ArrayList
    {
        return blocks;
    }

    static function New(parent : BlockBase) : If
    {
        var ret = new If();
        ret.init(parent);
        return ret;
    }

    override AddCodes(codes : OpModule)
    {
        sentences.Clear();
        int len = blocks.Count;
        for (int i = 0; i < len; i++)
        {
            var cb = blocks.Get(i) as CondBlock;
            if (i < len - 1)
                cb.Next = blocks.Get(i + 1) as CondBlock;
            else
                cb.Next = null;
            AddSentence(cb);
        }
        base.AddCodes(codes);
    }
}
