class Case : NodeBase
{
    var values : ArrayList = new ArrayList();

    function get_Values : ArrayList
    {
        return values;
    }

    var Block : Block;
    bool IsLast;

    static function New(parent : BlockBase) : Case
    {
        var ret = new Case();
        ret.Parent = parent;
        return ret;
    }

    override AddCodes(codes : OpModule)
    {
        int len = values.Count;
        if (len == 0)
        {
            codes.Add(I386.JmpD(Block.First));
            return;
        }
        for (int i = 0; i < values.Count; i++)
        {
            var v = values.Get(i) as NodeBase;
            codes.Add(I386.Push(Reg32.EDX));
            if (v.Type is TypeString)
            {
                v.AddCodesV(codes, "push", null);
                codes.Add(codes.GetCall("case", TypeString.Equal));
                codes.Add(I386.AddR(Reg32.ESP, Val32.NewI(8)));
                codes.Add(I386.Test(Reg32.EAX, Reg32.EAX));
                codes.Add(I386.Jcc(Cc.NZ, Block.First));
            }
            else
            {
                v.AddCodesV(codes, "mov", null);
                codes.Add(I386.Pop(Reg32.EDX));
                codes.Add(I386.Cmp(Reg32.EDX, Reg32.EAX));
                codes.Add(I386.Jcc(Cc.E, Block.First));
            }
        }
        if (IsLast)
            codes.Add(I386.JmpD(Parent.Destruct));
    }
}

class CaseBlock
{
    var _Case : Case;
    function get_Case : Case { return _Case; }
    function set_Case(value : Case) { _Case = value; }

    var _Block : Block;
    function get_Block : Block { return _Block; }
    function set_Block(value : Block) { _Block = value; }
}

class SwitchExpr : NodeBase
{
    var value : NodeBase;

    static function New(parent : BlockBase, value : NodeBase) : SwitchExpr
    {
        var ret = new SwitchExpr();
        ret.Parent = parent;
        ret.value = value;
        return ret;
    }

    override AddCodes(codes : OpModule)
    {
        value.AddCodesV(codes, "mov", null);
        codes.Add(I386.Mov(Reg32.EDX, Reg32.EAX));
    }
}

class Switch : BlockBase
{
    var expr : SwitchExpr;

    var blocks : ArrayList = new ArrayList();
    function get_Blocks : ArrayList
    {
        return blocks;
    }

    function get_AcceptsBreak : bool
    {
        return true;
    }

    static function New(parent : BlockBase, expr : NodeBase) : Switch
    {
        var ret = new Switch();
        ret.init(parent);
        ret.expr = SwitchExpr.New(ret, expr);
        return ret;
    }

    override AddCodes(codes : OpModule)
    {
        sentences.Clear();
        AddSentence(expr);
        var def : CaseBlock = null;
        var list = new ArrayList();
        for (int i = 0; i < blocks.Count; i++)
        {
            var cb = blocks.Get(i) as CaseBlock;
            if (cb.Case.Values.Count == 0)
            {
                if (def != null)
                    raise(cb.Case.Abort("switch: multiple defaults"));
                else
                    def = cb;
            }
            else
                list.Add(cb);
        }
        if (def != null)
            list.Add(def);
        int len = list.Count;
        for (int i = 0; i < len; i++)
        {
            var cb = list.Get(i) as CaseBlock;
            cb.Case.Block = cb.Block;
            cb.Case.IsLast = i == len - 1;
            AddSentence(cb.Case);
        }
        for (int i = 0; i < len; i++)
            AddSentence((list.Get(i) as CaseBlock).Block);
        base.AddCodes(codes);
    }
}
